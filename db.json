{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/googletest_1.png","path":"images/googletest_1.png","modified":0,"renderable":0},{"_id":"source/images/cover.jpg","path":"images/cover.jpg","modified":0,"renderable":0},{"_id":"themes/huno/source/css/APlayer.min.css","path":"css/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/animate.css","path":"css/animate.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/china-social-icon.css","path":"css/china-social-icon.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/musicplayer.css","path":"css/musicplayer.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/uno.css","path":"css/uno.css","modified":1,"renderable":1},{"_id":"themes/huno/source/json/data","path":"json/data","modified":0,"renderable":1},{"_id":"themes/huno/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/awesome-toc.min.js","path":"js/awesome-toc.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/jquery.githubRepoWidget.min.js","path":"js/jquery.githubRepoWidget.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/scale.fix.js","path":"js/scale.fix.js","modified":0,"renderable":1},{"_id":"themes/huno/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huno/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/huno/source/images/icon.png","path":"images/icon.png","modified":0,"renderable":1},{"_id":"themes/huno/source/images/nogicover7.jpg","path":"images/nogicover7.jpg","modified":0,"renderable":1},{"_id":"themes/huno/source/images/totop.png","path":"images/totop.png","modified":0,"renderable":1},{"_id":"themes/huno/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.ttf","path":"fonts/china-social/china-social.ttf","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.svg","path":"fonts/china-social/china-social.svg","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.eot","path":"fonts/china-social/china-social.eot","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/music-icons/icomoon.eot","path":"fonts/music-icons/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/music-icons/icomoon.svg","path":"fonts/music-icons/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/music-icons/icomoon.woff","path":"fonts/music-icons/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.woff","path":"fonts/china-social/china-social.woff","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.css","path":"fonts/foundation-icons/foundation-icons.css","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.eot","path":"fonts/foundation-icons/foundation-icons.eot","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/music-icons/icomoon.ttf","path":"fonts/music-icons/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/readme.html","path":"fonts/china-social/readme.html","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.woff","path":"fonts/foundation-icons/foundation-icons.woff","modified":0,"renderable":1},{"_id":"themes/huno/source/js/musicplayer.js","path":"js/musicplayer.js","modified":0,"renderable":1},{"_id":"themes/huno/source/images/sample/reactpic1.png","path":"images/sample/reactpic1.png","modified":0,"renderable":1},{"_id":"themes/huno/source/images/sample/reactpic2.png","path":"images/sample/reactpic2.png","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.ttf","path":"fonts/foundation-icons/foundation-icons.ttf","modified":0,"renderable":1},{"_id":"themes/huno/source/images/cover.jpg","path":"images/cover.jpg","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.svg","path":"fonts/foundation-icons/foundation-icons.svg","modified":0,"renderable":1},{"_id":"themes/huno/source/images/space.jpg","path":"images/space.jpg","modified":0,"renderable":1},{"_id":"themes/huno/source/images/wallpaper.jpg","path":"images/wallpaper.jpg","modified":0,"renderable":1},{"_id":"themes/huno/source/images/background-cover.jpg","path":"images/background-cover.jpg","modified":0,"renderable":1},{"_id":"source/music/qiuqian.m4a","path":"music/qiuqian.m4a","modified":0,"renderable":0},{"_id":"themes/huno/source/music/qiuqian.m4a","path":"music/qiuqian.m4a","modified":0,"renderable":1},{"_id":"themes/huno/source/music/freedom.mp3","path":"music/freedom.mp3","modified":0,"renderable":1},{"_id":"themes/huno/source/images/50音图.png","path":"images/50音图.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/huno/README.en.md","hash":"0878f26ed7fd9d4cbfeb0ddab5e1e14c93be793a","modified":1523883539826},{"_id":"themes/huno/README.md","hash":"f477895b3b089272faf903623d87783725867189","modified":1523883539828},{"_id":"themes/huno/_config.yml","hash":"cb4078b909ffc4093c56a2184a58f19ad0b2878d","modified":1524644634824},{"_id":"source/_posts/JNA简单使用.md","hash":"3e829c317cb6a47da24902cba5d60dc5315f28d9","modified":1528879692276},{"_id":"source/_posts/GoogleTest使用指南.md","hash":"da783531cf2fd1ae86c2d062d8854730db43bb71","modified":1529374968705},{"_id":"source/_posts/IDEA使用技巧.md","hash":"2feed0ac35384b7d07f9e0d6d56cdfd7b0edf375","modified":1525405451955},{"_id":"source/_posts/ajax跨域问题及其解决方案.md","hash":"715f692a8abc50d0e880891584e4df16a321aead","modified":1525324485650},{"_id":"source/_posts/test.md","hash":"a5264f71923f6f563395610c1921021dfb270f10","modified":1524563088187},{"_id":"source/_posts/react音乐播放器.md","hash":"c9b38b20621fc4d9339299aeffba6d5e9bb24dc8","modified":1524663488412},{"_id":"source/archive/index.md","hash":"5470e5e74b1f79da2d2eebdecb57a503514aa2c4","modified":1524283795974},{"_id":"source/links/index.md","hash":"faedf9a00c07522b17e9304bd6a7837453320c99","modified":1524644467632},{"_id":"source/about/index.md","hash":"d1f4cbd738035b0f49a6a601821b26f24493d459","modified":1524306439703},{"_id":"themes/huno/layout/archive.ejs","hash":"23aff325ab97b2c7dde6e757fa3add5226a88b4f","modified":1523883539931},{"_id":"themes/huno/layout/index.ejs","hash":"12c817a875f353c03d8795c2a7b653e4da22c17e","modified":1523883539935},{"_id":"themes/huno/layout/category.ejs","hash":"2b412d1b52b9da8ad19f6a66b1c18ab0b7546214","modified":1523883539933},{"_id":"themes/huno/layout/post.ejs","hash":"86c9d13e8abdcff4d368e34595e2d2f11f37e9d4","modified":1523883539946},{"_id":"themes/huno/layout/page-archive.ejs","hash":"ce5523d829c0fdd6a79984fcf15e33572a220df9","modified":1523883539939},{"_id":"themes/huno/layout/page.ejs","hash":"70a50ecf7e1aa9c658212f1e77783dcb287d56a6","modified":1523883539943},{"_id":"themes/huno/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523883539807},{"_id":"themes/huno/layout/tag.ejs","hash":"fefa03bed577cae2e1aac19bd5d30c5034f453a0","modified":1523883539949},{"_id":"themes/huno/.git/config","hash":"dbcb37613f74005fb2db8d18667b5359a270fba1","modified":1523883539817},{"_id":"themes/huno/layout/layout.ejs","hash":"245166d35e15753fb4faa63a4b648e62e3febea3","modified":1524625946079},{"_id":"themes/huno/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523883531573},{"_id":"themes/huno/languages/default.yml","hash":"bddd7fd79412849a52b9a36aae36af111b2db619","modified":1523883539873},{"_id":"themes/huno/languages/zh-TW.yml","hash":"d865666c14c58c70738d9aef04ae14e38e750c14","modified":1523883539878},{"_id":"themes/huno/languages/zh-CN.yml","hash":"fc0fcc3819c03baeecf2aa51cec08257973288cf","modified":1523883539875},{"_id":"themes/huno/.git/packed-refs","hash":"cc031bb5b3aceae40155273037f52eb3ea8bbd87","modified":1523883539799},{"_id":"source/images/googletest_1.png","hash":"4db9e058b49d3aab743cf149700d5e7610a2f1b7","modified":1528772324746},{"_id":"themes/huno/cs-icon.png","hash":"4ba5bfbacb1a533f3561112406c305e9510aa8dd","modified":1523883539830},{"_id":"themes/huno/layout/_partials/list-posts.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523883539892},{"_id":"themes/huno/layout/_scripts/site-analytics.ejs","hash":"e0e8d2fa02ec9d14b471565dd390386fc1fce970","modified":1528881078081},{"_id":"themes/huno/.git/index","hash":"43ab568de4432457a6a274d1959827be0d59934f","modified":1524283681372},{"_id":"themes/huno/layout/_partials/comment.ejs","hash":"d4907a2069b2b089dd377de713194646d98323ea","modified":1529380453326},{"_id":"themes/huno/layout/_partials/footer.ejs","hash":"981c73e063e7cbe72fa618b36b927606cdbc7823","modified":1523889215808},{"_id":"themes/huno/layout/_partials/disqus.ejs","hash":"30c043cc683c78f345a658cf64b37e55e6521685","modified":1523883539888},{"_id":"themes/huno/layout/_partials/article.ejs","hash":"1f02fcb626f8a1d93c8d0f8a00e5364717824aa9","modified":1523883539884},{"_id":"themes/huno/layout/_partials/archive.ejs","hash":"2c413cde5b1d3a475777e8ff8226762dfe92610c","modified":1523883539881},{"_id":"themes/huno/layout/_partials/social.ejs","hash":"2209c80384464e8336fabcc1e182c5cca7d5d6ee","modified":1528880589797},{"_id":"themes/huno/layout/_partials/side-panel.ejs","hash":"06213297afc00ed88fac10e469e0996bae459f74","modified":1525405948522},{"_id":"themes/huno/layout/_partials/duoshuo.ejs","hash":"7cfe423c088a3bf0565e27a1c17d1b99a260786b","modified":1523883539890},{"_id":"themes/huno/layout/_partials/pagination.ejs","hash":"1240c019aa4df269777c54c0d2124b534ec1f380","modified":1523883539916},{"_id":"themes/huno/layout/_scripts/killie6.ejs","hash":"2d5db8a53962ac704b8bfc40688319bed2e84ac9","modified":1523883539926},{"_id":"source/images/cover.jpg","hash":"1d3c10fa51d180fbd625f8250a7c490531c8d50c","modified":1524062063914},{"_id":"themes/huno/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523883531585},{"_id":"themes/huno/layout/_scripts/github-repo-widget.ejs","hash":"ee64a8e431318cb8fb25f59cfeec0def95b58912","modified":1523883539924},{"_id":"themes/huno/.git/logs/HEAD","hash":"873920ab8ca659a00b157a0c19f0f4cd0a6c9c4e","modified":1523883539811},{"_id":"themes/huno/layout/_scripts/mathjax.ejs","hash":"2921f9f3b3c3e40f59c2d023764694a79ac07926","modified":1523883539929},{"_id":"themes/huno/layout/_scripts/awesome-toc.ejs","hash":"b39df57929c246726ca45723ca9ad1a4104738c4","modified":1523883539922},{"_id":"themes/huno/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523883531577},{"_id":"themes/huno/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523883531575},{"_id":"themes/huno/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523883531578},{"_id":"themes/huno/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523883531575},{"_id":"themes/huno/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523883531582},{"_id":"themes/huno/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523883531580},{"_id":"themes/huno/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523883531579},{"_id":"themes/huno/source/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1524380647659},{"_id":"themes/huno/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1523883531576},{"_id":"themes/huno/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523883531584},{"_id":"themes/huno/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1523883531583},{"_id":"themes/huno/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1523883531581},{"_id":"themes/huno/source/css/animate.css","hash":"651fcf046b1bd2bff3ab4cb8947ff7fe058de373","modified":1523883539954},{"_id":"themes/huno/source/css/archive.css","hash":"7238ea5f6bda859e3bae7aaa546caf27fe1fb0cc","modified":1523883539957},{"_id":"themes/huno/source/css/china-social-icon.css","hash":"2f90442f6d0d289e49c07a85c2dae32cab8b2063","modified":1523883539959},{"_id":"themes/huno/source/css/musicplayer.css","hash":"c28b7e7cd7d9d530cd0386102acfda776cf9ea1a","modified":1524626130951},{"_id":"themes/huno/source/css/uno.css","hash":"7c13e195c9313dc09156fa5834c961d6800825db","modified":1530632007586},{"_id":"themes/huno/source/json/data","hash":"f4f2d6eccabe7082ca9930252337dc259eadade9","modified":1524634801907},{"_id":"themes/huno/source/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1524380647662},{"_id":"themes/huno/source/js/awesome-toc.min.js","hash":"b4d0f2a33f8340eb2543e8b2cee0dfd745cfb54a","modified":1523883539991},{"_id":"themes/huno/source/js/jquery.githubRepoWidget.min.js","hash":"94a141fa474ec5022f7c397b4fd3ff92405ab755","modified":1523883539992},{"_id":"themes/huno/source/js/scale.fix.js","hash":"ce593f56728cc1cedf2e513cb20b926de3b05e07","modified":1523883539995},{"_id":"themes/huno/source/css/highlight.styl","hash":"92eabbf94e7a06e968c356bedf4adb04700f1c2e","modified":1523883539961},{"_id":"themes/huno/source/js/main.js","hash":"fb04a643ce69566dfd9854a786925de9683b995d","modified":1524568805098},{"_id":"themes/huno/source/images/icon.png","hash":"ab12ff046c4a96f6e3c924e87e4bf6f6aeb34cab","modified":1524276408948},{"_id":"themes/huno/source/images/nogicover7.jpg","hash":"b5d7d306632f2435a1ed7ca34070d2d0a9cd2d40","modified":1524563017423},{"_id":"themes/huno/source/images/totop.png","hash":"4f6cb11941e5a72b03cb00cf9d9d55671b4310eb","modified":1523883539990},{"_id":"themes/huno/source/js/jquery.min.js","hash":"8b6babff47b8a9793f37036fd1b1a3ad41d38423","modified":1523883539993},{"_id":"themes/huno/.git/objects/pack/pack-ed2c9c0694a622148b5a465ca42cbe5886a9abe4.idx","hash":"0b74d8a25cd9d42f3316b492e63c3e7339371cb2","modified":1523883539633},{"_id":"themes/huno/.git/refs/heads/master","hash":"9eecdf816da8252747f1db544f269f734daf0b38","modified":1523883539810},{"_id":"themes/huno/source/fonts/china-social/china-social.ttf","hash":"2f94360528097df7dcfb39baf8df5393a0d47ca3","modified":1523883539969},{"_id":"themes/huno/source/fonts/china-social/china-social.svg","hash":"4bad780e6a31f4fa9fef037a3d9ecb8623042a6e","modified":1523883539968},{"_id":"themes/huno/source/fonts/china-social/china-social.eot","hash":"a43a5c3d66f0d38639a595ebd02857e152ada475","modified":1523883539966},{"_id":"themes/huno/source/fonts/music-icons/icomoon.eot","hash":"0312633de62e3ad227c01f547bcdd45711658f54","modified":1486205750000},{"_id":"themes/huno/source/fonts/music-icons/icomoon.svg","hash":"c220fcba9925618e4a9b38f64816210e81e47632","modified":1486205750000},{"_id":"themes/huno/source/fonts/music-icons/icomoon.woff","hash":"1ff3c5f0e6f20b87114a5b904b2517e603ab65cd","modified":1486205750000},{"_id":"themes/huno/source/fonts/china-social/china-social.woff","hash":"74c0ac5268cf7ffe270faaf7c960b74d483d2df1","modified":1523883539970},{"_id":"themes/huno/source/fonts/foundation-icons/.fontcustom-data","hash":"3b0cfb3ba2ee7ccae391bc66b3acaa6895932e5f","modified":1523883539973},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.css","hash":"426036f1d554b9dffae8b38acc36cade40d9521a","modified":1523883539975},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.eot","hash":"d584172686583fd510d8f04cf21e6e77fce51435","modified":1523883539979},{"_id":"themes/huno/source/fonts/music-icons/icomoon.ttf","hash":"605931dc3ea1d6cec27fe3be8137ca5ceac62cb9","modified":1486205750000},{"_id":"themes/huno/source/fonts/china-social/readme.html","hash":"ca335751de11d6ef7721dc907571de39cef6e361","modified":1523883539972},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.woff","hash":"112fb0e498037f2fea036adb8105e47638159eaa","modified":1523883539985},{"_id":"themes/huno/source/js/musicplayer.js","hash":"4041a0d31591ecd23e8ba7ddf9263167cc4f8140","modified":1524636942036},{"_id":"themes/huno/source/images/sample/reactpic1.png","hash":"4a4d4f2545bb3699bb49d4102197276986ae33c8","modified":1524662051970},{"_id":"themes/huno/source/images/sample/reactpic2.png","hash":"2cfbbd72babc96f147578873b30acc0a0939ec2d","modified":1524663108840},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.ttf","hash":"4b2bce6c792493a4a5716b6fec2dbefe89492c3f","modified":1523883539983},{"_id":"themes/huno/source/images/cover.jpg","hash":"1d3c10fa51d180fbd625f8250a7c490531c8d50c","modified":1524374196206},{"_id":"themes/huno/.git/logs/refs/heads/master","hash":"873920ab8ca659a00b157a0c19f0f4cd0a6c9c4e","modified":1523883539812},{"_id":"themes/huno/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523883539806},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.svg","hash":"bdca38f453f9935203fe8cd071e97d7f8576e0be","modified":1523883539981},{"_id":"themes/huno/source/images/space.jpg","hash":"ce4253486badfb95c7695035cfc59ca8668739ef","modified":1523886258387},{"_id":"themes/huno/.git/logs/refs/remotes/origin/HEAD","hash":"873920ab8ca659a00b157a0c19f0f4cd0a6c9c4e","modified":1523883539805},{"_id":"themes/huno/source/images/wallpaper.jpg","hash":"7e318a8319cb334c76d6f3957d9fd4b2b7481091","modified":1524275474861},{"_id":"themes/huno/source/images/background-cover.jpg","hash":"08162d5ddd6c081f2713bfd10261e62f0752a600","modified":1523883539989},{"_id":"themes/huno/demo.gif","hash":"cf6121b4aa0f3b07a2f919099942d97206202aa8","modified":1523883539838},{"_id":"themes/huno/.git/objects/pack/pack-ed2c9c0694a622148b5a465ca42cbe5886a9abe4.pack","hash":"12b8a53c201d22485c6cebc7b425b57bf1ffab67","modified":1523883539703},{"_id":"source/music/qiuqian.m4a","hash":"2b9a3aa5c4fe182405430822dda4fc0d1b3e4e19","modified":1523855595184},{"_id":"themes/huno/source/music/qiuqian.m4a","hash":"2b9a3aa5c4fe182405430822dda4fc0d1b3e4e19","modified":1524485460940},{"_id":"themes/huno/source/music/freedom.mp3","hash":"07d5c2c9f457af6518a99be0c07ffc72ac167ed6","modified":1520481348453},{"_id":"public/links/index.html","hash":"c31a6b4ad6bb5d87e37a4401cf78ac7cc6dad420","modified":1529380460005},{"_id":"public/archive/index.html","hash":"6e302f2fe791addb03b0be81d2c7aebe739ca104","modified":1528881085668},{"_id":"public/about/index.html","hash":"d277da7648b66dac38b6a278291e0fd7903a7ac3","modified":1529380460006},{"_id":"public/GoogleTest使用指南/2018/06/12/index.html","hash":"a3658f2e46051a26c4b1067a80a3dc8e5ef9f354","modified":1529380460006},{"_id":"public/IDEA使用技巧/2018/05/03/index.html","hash":"7d0867fb88693839a9925896dcb09499935c8ca0","modified":1529380460006},{"_id":"public/ajax跨域问题及其解决方案/2018/05/03/index.html","hash":"b18a32249d029bc9648c84d803230d123790df78","modified":1529380460007},{"_id":"public/test/2018/04/21/index.html","hash":"e9e46c5c5e8827915fce065f22da683303c8c1ca","modified":1529380460006},{"_id":"public/react音乐播放器/2018/04/25/index.html","hash":"302640c9bfdaaea2d35aa79afbff2e1748473da9","modified":1529380460006},{"_id":"public/archives/index.html","hash":"3cbee62c4854d077bce0e00651708b0a9929541a","modified":1529374975196},{"_id":"public/archives/2018/04/index.html","hash":"e6014a74a92dad0884b22baae4dc68e7ae1f2d87","modified":1528881085669},{"_id":"public/archives/2018/05/index.html","hash":"895c2c23bd18da3b59b06e7bc8cebd6426ad176f","modified":1528881085669},{"_id":"public/archives/2018/index.html","hash":"da633e386e0efa57accc8dcd819590202402ad8d","modified":1529374975197},{"_id":"public/categories/技术/index.html","hash":"67010a3299709a8629bdbc52132fc2ec9630aeaa","modified":1529374975197},{"_id":"public/categories/magica/index.html","hash":"860a4485bf78184f95f1b9f2496400e2df0a3474","modified":1528881085670},{"_id":"public/index.html","hash":"de4aec7d029afa3ef581c2a806021bdb3f2a4cf1","modified":1529374975197},{"_id":"public/archives/2018/06/index.html","hash":"efc3613def7eda0999ecf831c40236475ddf9984","modified":1529374975197},{"_id":"public/tags/ajax/index.html","hash":"afbe3ff9025da67b150528e3a93a531b2aa99d37","modified":1528881085670},{"_id":"public/tags/测试/index.html","hash":"fb5345bfbbe9703e2523bc935d6cc9bf675df4f7","modified":1528881085670},{"_id":"public/tags/react/index.html","hash":"39f32bfa763263995013644e0769b22208b7b6eb","modified":1528881085670},{"_id":"public/tags/GoogleTest/index.html","hash":"c5caeacdbf66ab2edda089aa5cb7c5f8f030d4e1","modified":1529374975197},{"_id":"public/tags/IDE/index.html","hash":"c370a3d010ca927cf63b0d7bc32df2a2efa6cdc3","modified":1528881085670},{"_id":"public/JNA简单使用/2018/06/12/index.html","hash":"df26f72d7ecf33b191cee7e442595ab216b2e488","modified":1529380460006},{"_id":"public/tags/JNA/index.html","hash":"7e4a335a01cb1a156db8b063ecaa2278a0786989","modified":1528881085670},{"_id":"public/json/data","hash":"f4f2d6eccabe7082ca9930252337dc259eadade9","modified":1528878969878},{"_id":"public/images/nogicover7.jpg","hash":"b5d7d306632f2435a1ed7ca34070d2d0a9cd2d40","modified":1528878969878},{"_id":"public/images/googletest_1.png","hash":"4db9e058b49d3aab743cf149700d5e7610a2f1b7","modified":1528878969878},{"_id":"public/fonts/china-social/china-social.ttf","hash":"2f94360528097df7dcfb39baf8df5393a0d47ca3","modified":1528878969878},{"_id":"public/images/icon.png","hash":"ab12ff046c4a96f6e3c924e87e4bf6f6aeb34cab","modified":1528878969878},{"_id":"public/fonts/china-social/china-social.svg","hash":"4bad780e6a31f4fa9fef037a3d9ecb8623042a6e","modified":1528878969878},{"_id":"public/fonts/music-icons/icomoon.eot","hash":"0312633de62e3ad227c01f547bcdd45711658f54","modified":1528878969878},{"_id":"public/fonts/china-social/china-social.eot","hash":"a43a5c3d66f0d38639a595ebd02857e152ada475","modified":1528878969878},{"_id":"public/fonts/china-social/china-social.woff","hash":"74c0ac5268cf7ffe270faaf7c960b74d483d2df1","modified":1528878969878},{"_id":"public/fonts/music-icons/icomoon.svg","hash":"c220fcba9925618e4a9b38f64816210e81e47632","modified":1528878969878},{"_id":"public/fonts/music-icons/icomoon.woff","hash":"1ff3c5f0e6f20b87114a5b904b2517e603ab65cd","modified":1528878969879},{"_id":"public/images/totop.png","hash":"4f6cb11941e5a72b03cb00cf9d9d55671b4310eb","modified":1528878969879},{"_id":"public/fonts/music-icons/icomoon.ttf","hash":"605931dc3ea1d6cec27fe3be8137ca5ceac62cb9","modified":1528878969879},{"_id":"public/fonts/foundation-icons/foundation-icons.eot","hash":"d584172686583fd510d8f04cf21e6e77fce51435","modified":1528878969879},{"_id":"public/fonts/foundation-icons/foundation-icons.woff","hash":"112fb0e498037f2fea036adb8105e47638159eaa","modified":1528878969879},{"_id":"public/fonts/foundation-icons/foundation-icons.ttf","hash":"4b2bce6c792493a4a5716b6fec2dbefe89492c3f","modified":1528878969879},{"_id":"public/images/sample/reactpic1.png","hash":"4a4d4f2545bb3699bb49d4102197276986ae33c8","modified":1528878969879},{"_id":"public/images/sample/reactpic2.png","hash":"2cfbbd72babc96f147578873b30acc0a0939ec2d","modified":1528878969879},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1528878969879},{"_id":"public/assets/js/Meting.min.js","hash":"6909537111a24455834c32b08610e392079921f7","modified":1528878969879},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1528878969879},{"_id":"public/css/archive.css","hash":"88005d441d52e143cd2ab4da53b1ec50e22f9ade","modified":1528878971600},{"_id":"public/css/musicplayer.css","hash":"f21a772744c8b084d1ff49765a4c0486a40c7819","modified":1528878971600},{"_id":"public/css/china-social-icon.css","hash":"2f90442f6d0d289e49c07a85c2dae32cab8b2063","modified":1528878971601},{"_id":"public/css/highlight.css","hash":"701da6788bee02c165236174b6767ae06957f051","modified":1528878971601},{"_id":"public/js/jquery.githubRepoWidget.min.js","hash":"94a141fa474ec5022f7c397b4fd3ff92405ab755","modified":1528878971601},{"_id":"public/js/scale.fix.js","hash":"bbf62458c63fca2535965f9dfaacfbc6bc697e03","modified":1528878971601},{"_id":"public/js/awesome-toc.min.js","hash":"b4d0f2a33f8340eb2543e8b2cee0dfd745cfb54a","modified":1528878971601},{"_id":"public/js/main.js","hash":"1efbf3ddde252dab9336354fb559ead611c39a0f","modified":1528878971601},{"_id":"public/images/cover.jpg","hash":"1d3c10fa51d180fbd625f8250a7c490531c8d50c","modified":1528878971619},{"_id":"public/fonts/foundation-icons/foundation-icons.svg","hash":"bdca38f453f9935203fe8cd071e97d7f8576e0be","modified":1528878971619},{"_id":"public/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1528878971622},{"_id":"public/fonts/china-social/readme.html","hash":"ca335751de11d6ef7721dc907571de39cef6e361","modified":1528878971623},{"_id":"public/fonts/foundation-icons/foundation-icons.css","hash":"2ad3bb2b4b7d1d67b4d40a9672193638c168c12a","modified":1528878971645},{"_id":"public/images/space.jpg","hash":"ce4253486badfb95c7695035cfc59ca8668739ef","modified":1528878971653},{"_id":"public/css/uno.css","hash":"4a65130e12a4439c831a2645fe5c66885d0e9fc9","modified":1530632047027},{"_id":"public/css/animate.css","hash":"a2f854fbdc52a5657dd5e2b95cc96c0da32f3ea2","modified":1528878971681},{"_id":"public/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1528878971681},{"_id":"public/images/wallpaper.jpg","hash":"7e318a8319cb334c76d6f3957d9fd4b2b7481091","modified":1528878971681},{"_id":"public/images/background-cover.jpg","hash":"08162d5ddd6c081f2713bfd10261e62f0752a600","modified":1528878971692},{"_id":"public/js/jquery.min.js","hash":"06e872300088b9ba8a08427d28ed0efcdf9c6ff5","modified":1528878971695},{"_id":"public/js/musicplayer.js","hash":"4041a0d31591ecd23e8ba7ddf9263167cc4f8140","modified":1528878971707},{"_id":"public/music/qiuqian.m4a","hash":"2b9a3aa5c4fe182405430822dda4fc0d1b3e4e19","modified":1528878971723},{"_id":"public/music/freedom.mp3","hash":"07d5c2c9f457af6518a99be0c07ffc72ac167ed6","modified":1528878971782},{"_id":"themes/huno/source/images/50音图.png","hash":"57d2a737e2e4e5a3245ed1460de51b4935bb4086","modified":1529821549327},{"_id":"public/images/50音图.png","hash":"57d2a737e2e4e5a3245ed1460de51b4935bb4086","modified":1530632047024}],"Category":[{"name":"技术","_id":"cjicv29pi0004mww3pm2872at"},{"name":"magica","_id":"cjicv29pw000imww3ummldhro"}],"Data":[],"Page":[{"title":"友链","_content":"以下是活跃的大佬，感谢长久以来的帮助！\n\n<img src=\"https://blog.angelmsger.com/img/avatar.png\" width=\"120px\" height=\"120px\">\n*[AngelMsger](https://blog.angelmsger.com)*\n\n<img src=\"https://blog.mythsman.com/images/avatar.png\" width=\"120px\" height=\"120px\">\n*[Myths](https://blog.mythsman.com)*\n\n\n\n\n","source":"links/index.md","raw":"---\ntitle: 友链 \n---\n以下是活跃的大佬，感谢长久以来的帮助！\n\n<img src=\"https://blog.angelmsger.com/img/avatar.png\" width=\"120px\" height=\"120px\">\n*[AngelMsger](https://blog.angelmsger.com)*\n\n<img src=\"https://blog.mythsman.com/images/avatar.png\" width=\"120px\" height=\"120px\">\n*[Myths](https://blog.mythsman.com)*\n\n\n\n\n","date":"2018-04-25T08:21:07.632Z","updated":"2018-04-25T08:21:07.632Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjicv29pe0001mww30dlmfu1c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>以下是活跃的大佬，感谢长久以来的帮助！</p>\n<p><img src=\"https://blog.angelmsger.com/img/avatar.png\" width=\"120px\" height=\"120px\"><br><em><a href=\"https://blog.angelmsger.com\" target=\"_blank\" rel=\"noopener\">AngelMsger</a></em></p>\n<p><img src=\"https://blog.mythsman.com/images/avatar.png\" width=\"120px\" height=\"120px\"><br><em><a href=\"https://blog.mythsman.com\" target=\"_blank\" rel=\"noopener\">Myths</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下是活跃的大佬，感谢长久以来的帮助！</p>\n<p><img src=\"https://blog.angelmsger.com/img/avatar.png\" width=\"120px\" height=\"120px\"><br><em><a href=\"https://blog.angelmsger.com\" target=\"_blank\" rel=\"noopener\">AngelMsger</a></em></p>\n<p><img src=\"https://blog.mythsman.com/images/avatar.png\" width=\"120px\" height=\"120px\"><br><em><a href=\"https://blog.mythsman.com\" target=\"_blank\" rel=\"noopener\">Myths</a></em></p>\n"},{"title":"归档","layout":"page-archive","_content":"","source":"archive/index.md","raw":"---\ntitle: 归档\nlayout: page-archive\n---\n","date":"2018-05-03T04:40:01.127Z","updated":"2018-04-21T04:09:55.974Z","path":"archive/index.html","comments":1,"_id":"cjicv29ph0003mww3jpzr80rk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-04-21T02:45:33.000Z","_content":"\n四年大学生涯，如今悄然而逝。想想当初的自己，唏嘘不已。Ma Ma, 在这个十字路口，需要深刻地审视下自己。\n\n外人看来，不过一程序猿。不过，爱游戏，爱看书，爱音乐，对生活里的EveryLittleThing都充满好奇，这才是真实的自己。\n\n在这里，我不甘于做一个纯粹的码农，给自己定一个小目标，月更5篇博客。这里，将是我展现自己的工坊。\n\n1. 学习技术的记录\n2. 技术问题的解决\n3. 值得记录的事件\n4. 分享自己的兴趣和爱好\n\n让自己变得有趣又强大！\n\n| Contact Me | FelixLee |\n| - | :-:|\n| Email | 729263226@qq.com |\n| Github | [Felixlee1995](https://github.com/FelixLee1995) |\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于 \ndate: 2018-04-21 10:45:33\n---\n\n四年大学生涯，如今悄然而逝。想想当初的自己，唏嘘不已。Ma Ma, 在这个十字路口，需要深刻地审视下自己。\n\n外人看来，不过一程序猿。不过，爱游戏，爱看书，爱音乐，对生活里的EveryLittleThing都充满好奇，这才是真实的自己。\n\n在这里，我不甘于做一个纯粹的码农，给自己定一个小目标，月更5篇博客。这里，将是我展现自己的工坊。\n\n1. 学习技术的记录\n2. 技术问题的解决\n3. 值得记录的事件\n4. 分享自己的兴趣和爱好\n\n让自己变得有趣又强大！\n\n| Contact Me | FelixLee |\n| - | :-:|\n| Email | 729263226@qq.com |\n| Github | [Felixlee1995](https://github.com/FelixLee1995) |\n\n\n\n\n","updated":"2018-04-21T10:27:19.703Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjicv29q4000umww3xcuopilg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>四年大学生涯，如今悄然而逝。想想当初的自己，唏嘘不已。Ma Ma, 在这个十字路口，需要深刻地审视下自己。</p>\n<p>外人看来，不过一程序猿。不过，爱游戏，爱看书，爱音乐，对生活里的EveryLittleThing都充满好奇，这才是真实的自己。</p>\n<p>在这里，我不甘于做一个纯粹的码农，给自己定一个小目标，月更5篇博客。这里，将是我展现自己的工坊。</p>\n<ol>\n<li>学习技术的记录</li>\n<li>技术问题的解决</li>\n<li>值得记录的事件</li>\n<li>分享自己的兴趣和爱好</li>\n</ol>\n<p>让自己变得有趣又强大！</p>\n<table>\n<thead>\n<tr>\n<th>Contact Me</th>\n<th style=\"text-align:center\">FelixLee</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td style=\"text-align:center\"><a href=\"mailto:729263226@qq.com\" target=\"_blank\" rel=\"noopener\">729263226@qq.com</a></td>\n</tr>\n<tr>\n<td>Github</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/FelixLee1995\" target=\"_blank\" rel=\"noopener\">Felixlee1995</a></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>四年大学生涯，如今悄然而逝。想想当初的自己，唏嘘不已。Ma Ma, 在这个十字路口，需要深刻地审视下自己。</p>\n<p>外人看来，不过一程序猿。不过，爱游戏，爱看书，爱音乐，对生活里的EveryLittleThing都充满好奇，这才是真实的自己。</p>\n<p>在这里，我不甘于做一个纯粹的码农，给自己定一个小目标，月更5篇博客。这里，将是我展现自己的工坊。</p>\n<ol>\n<li>学习技术的记录</li>\n<li>技术问题的解决</li>\n<li>值得记录的事件</li>\n<li>分享自己的兴趣和爱好</li>\n</ol>\n<p>让自己变得有趣又强大！</p>\n<table>\n<thead>\n<tr>\n<th>Contact Me</th>\n<th style=\"text-align:center\">FelixLee</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td style=\"text-align:center\"><a href=\"mailto:729263226@qq.com\" target=\"_blank\" rel=\"noopener\">729263226@qq.com</a></td>\n</tr>\n<tr>\n<td>Github</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/FelixLee1995\" target=\"_blank\" rel=\"noopener\">Felixlee1995</a></td>\n</tr>\n</tbody>\n</table>\n"}],"Post":[{"title":"JNA简单使用","date":"2018-06-12T04:10:52.000Z","_content":"\n## JNA简介\n\nJNA全称Java Native Access，是一个建立在经典的JNI技术之上的Java开源框架（https://github.com/java-native-access/jna）。\nJNA提供一组Java工具类用于在运行期动态访问系统本地库（native library：如Window的dll）而不需要编写任何Native/JNI代码。\n开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射。\n\n[jar下载地址](\"https://github.com/java-native-access/jna/releases\")\n\n__注意点：Jna只能调用dll中的function，而不能调用method。__ 解决方法，包装一个原生的dll去调用dll中类的method，只要dll能正常使用，即可通过Jna调用包装后的dll中的function。\n\n## 使用\n\n+ 在java中引入jna.jar\n+ 创建接口继承com.sun.jna.Library\n+ 声明需要调用的接口\n+ 使用接口的实例来调用接口中的方法\n\n### 示例\n\n```java\npublic interface TrApi extends Library {\n\n    TrApi TRADERINSTANCE = Native.loadLibrary(\"USTPtraderapiAF\", TrApi.class);\n\n    void CreateFtdcTraderApi(String pszFlowPath);\n}\n\npublic static void main(String []args) {\n    Trapi api = Trapi.TRADERINSTANCE;\n    api.CreateFtdcTraderApi(\"\");\n}\n```\n\n其中对应的参数需要遵循native<-->java的映射关系。\n\n如下：\n\n| Native Type | Size | Java Type | Common Windows Types |\n| - | :-: | :-:  | :-: |\n| char | 8-bit integer | byte | BYTE, TCHAR |\n| short | 16-bit integer | short | WORD |\n| wchar_t | 16/32-bit character | char | TCHAR |\n| int | 32-bit integer | int | DWORD |\n| int | boolean value | boolean | BOOL |\n| long | 32/64-bit integer | NativeLong | LONG |\n| long long | 64-bit integer | long | __int64 |\n| float | 32-bit FP | float |  |\n| double | 64-bit FP | double |  |\n| char* | C string | String | LPTCSTR |\n| void* | pointer | Pointer | LPVOID, HANDLE, LP|\n\n若传递的是结构体，需要定义结构体d额类结构，继承com.sun.jna.Structure并实现getFieldOrder方法，来返回字段顺序。\n\n__示例：__\n\n```java\npublic class ApiStruct extends Structure {\n\n    byte[] byteArr = new byte[21];\n    int [] intArr = new int[12];\n\n    @Override\n    protected List<String> getFieldOrder() {\n        List order = new ArrayList<String>();\n        order.add(\"byteArr\");\n        order.add(\"intArr\");\n        return order;\n    }\n}\n```\n\n__注意：在传递参数时，准确的来说是给dll传递了一段内存，并定义了内部的字段顺序，故结构体内的长度需要是确定好的，即结构体内有数组时，一定要先声明大小，分配好内存空间，此时传递的结构体才是完好可用的，否则将会产生 invalid memory  access错误。__\n\n## 回调函数的使用\n回调的意义在于dll内部声明一个回调函数的接口，并在需要调用的函数中传入回调函数的指针，就可以在函数中指定的位置调用外部实现接口。\n\ndll中定义：\n\n```c++\ntypedef void(* MyCallback)(char*errorMsg);\n\nextern \"C\" EXPORTAPI void orderInsert(OrderField order,Mycallback func);\n```\n\n然后在dll中需要使用的地方调用 Mycallback\n\njava中需要在jna接口中定义回调接口如下：\n\n```java\nvoid orderInsert(OrderField,Callbackfunc);\n\npublic interface Callbackfunc extends Callback {\n    public void callback_fun(String msg);\n}\n\npublic class CallbackfuncImpl implements Callbackfunc {\n\n    @Override\n    public void callback_fun(String msg) {\n        System.out.println(\"Message:\" + msg);\n    }\n}\n\npublic static void main(String []args) {\n    API api = api.instance;\n    API.CallbackfuncImpl func = new API.Callbackfuncimpl();\n    api.orderInsert(new OrderField(),func);\n}\n```\n","source":"_posts/JNA简单使用.md","raw":"---\ntitle: JNA简单使用\ndate: 2018-06-12 12:10:52\ntags: JNA\ncategories: 技术\n---\n\n## JNA简介\n\nJNA全称Java Native Access，是一个建立在经典的JNI技术之上的Java开源框架（https://github.com/java-native-access/jna）。\nJNA提供一组Java工具类用于在运行期动态访问系统本地库（native library：如Window的dll）而不需要编写任何Native/JNI代码。\n开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射。\n\n[jar下载地址](\"https://github.com/java-native-access/jna/releases\")\n\n__注意点：Jna只能调用dll中的function，而不能调用method。__ 解决方法，包装一个原生的dll去调用dll中类的method，只要dll能正常使用，即可通过Jna调用包装后的dll中的function。\n\n## 使用\n\n+ 在java中引入jna.jar\n+ 创建接口继承com.sun.jna.Library\n+ 声明需要调用的接口\n+ 使用接口的实例来调用接口中的方法\n\n### 示例\n\n```java\npublic interface TrApi extends Library {\n\n    TrApi TRADERINSTANCE = Native.loadLibrary(\"USTPtraderapiAF\", TrApi.class);\n\n    void CreateFtdcTraderApi(String pszFlowPath);\n}\n\npublic static void main(String []args) {\n    Trapi api = Trapi.TRADERINSTANCE;\n    api.CreateFtdcTraderApi(\"\");\n}\n```\n\n其中对应的参数需要遵循native<-->java的映射关系。\n\n如下：\n\n| Native Type | Size | Java Type | Common Windows Types |\n| - | :-: | :-:  | :-: |\n| char | 8-bit integer | byte | BYTE, TCHAR |\n| short | 16-bit integer | short | WORD |\n| wchar_t | 16/32-bit character | char | TCHAR |\n| int | 32-bit integer | int | DWORD |\n| int | boolean value | boolean | BOOL |\n| long | 32/64-bit integer | NativeLong | LONG |\n| long long | 64-bit integer | long | __int64 |\n| float | 32-bit FP | float |  |\n| double | 64-bit FP | double |  |\n| char* | C string | String | LPTCSTR |\n| void* | pointer | Pointer | LPVOID, HANDLE, LP|\n\n若传递的是结构体，需要定义结构体d额类结构，继承com.sun.jna.Structure并实现getFieldOrder方法，来返回字段顺序。\n\n__示例：__\n\n```java\npublic class ApiStruct extends Structure {\n\n    byte[] byteArr = new byte[21];\n    int [] intArr = new int[12];\n\n    @Override\n    protected List<String> getFieldOrder() {\n        List order = new ArrayList<String>();\n        order.add(\"byteArr\");\n        order.add(\"intArr\");\n        return order;\n    }\n}\n```\n\n__注意：在传递参数时，准确的来说是给dll传递了一段内存，并定义了内部的字段顺序，故结构体内的长度需要是确定好的，即结构体内有数组时，一定要先声明大小，分配好内存空间，此时传递的结构体才是完好可用的，否则将会产生 invalid memory  access错误。__\n\n## 回调函数的使用\n回调的意义在于dll内部声明一个回调函数的接口，并在需要调用的函数中传入回调函数的指针，就可以在函数中指定的位置调用外部实现接口。\n\ndll中定义：\n\n```c++\ntypedef void(* MyCallback)(char*errorMsg);\n\nextern \"C\" EXPORTAPI void orderInsert(OrderField order,Mycallback func);\n```\n\n然后在dll中需要使用的地方调用 Mycallback\n\njava中需要在jna接口中定义回调接口如下：\n\n```java\nvoid orderInsert(OrderField,Callbackfunc);\n\npublic interface Callbackfunc extends Callback {\n    public void callback_fun(String msg);\n}\n\npublic class CallbackfuncImpl implements Callbackfunc {\n\n    @Override\n    public void callback_fun(String msg) {\n        System.out.println(\"Message:\" + msg);\n    }\n}\n\npublic static void main(String []args) {\n    API api = api.instance;\n    API.CallbackfuncImpl func = new API.Callbackfuncimpl();\n    api.orderInsert(new OrderField(),func);\n}\n```\n","slug":"JNA简单使用","published":1,"updated":"2018-06-13T08:48:12.276Z","_id":"cjicv29oa0000mww3eku14a9v","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"JNA简介\"><a href=\"#JNA简介\" class=\"headerlink\" title=\"JNA简介\"></a>JNA简介</h2><p>JNA全称Java Native Access，是一个建立在经典的JNI技术之上的Java开源框架（<a href=\"https://github.com/java-native-access/jna）。\" target=\"_blank\" rel=\"noopener\">https://github.com/java-native-access/jna）。</a><br>JNA提供一组Java工具类用于在运行期动态访问系统本地库（native library：如Window的dll）而不需要编写任何Native/JNI代码。<br>开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射。</p>\n<p><a href=\"&quot;https://github.com/java-native-access/jna/releases&quot;\">jar下载地址</a></p>\n<p><strong>注意点：Jna只能调用dll中的function，而不能调用method。</strong> 解决方法，包装一个原生的dll去调用dll中类的method，只要dll能正常使用，即可通过Jna调用包装后的dll中的function。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>在java中引入jna.jar</li>\n<li>创建接口继承com.sun.jna.Library</li>\n<li>声明需要调用的接口</li>\n<li>使用接口的实例来调用接口中的方法</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TrApi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Library</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    TrApi TRADERINSTANCE = Native.loadLibrary(<span class=\"string\">\"USTPtraderapiAF\"</span>, TrApi.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CreateFtdcTraderApi</span><span class=\"params\">(String pszFlowPath)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">    Trapi api = Trapi.TRADERINSTANCE;</span><br><span class=\"line\">    api.CreateFtdcTraderApi(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中对应的参数需要遵循native<-->java的映射关系。</--></p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>Native Type</th>\n<th style=\"text-align:center\">Size</th>\n<th style=\"text-align:center\">Java Type</th>\n<th style=\"text-align:center\">Common Windows Types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td style=\"text-align:center\">8-bit integer</td>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">BYTE, TCHAR</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:center\">16-bit integer</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">WORD</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td style=\"text-align:center\">16/32-bit character</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">TCHAR</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:center\">32-bit integer</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">DWORD</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:center\">boolean value</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">BOOL</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:center\">32/64-bit integer</td>\n<td style=\"text-align:center\">NativeLong</td>\n<td style=\"text-align:center\">LONG</td>\n</tr>\n<tr>\n<td>long long</td>\n<td style=\"text-align:center\">64-bit integer</td>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">__int64</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:center\">32-bit FP</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:center\">64-bit FP</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>char*</td>\n<td style=\"text-align:center\">C string</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">LPTCSTR</td>\n</tr>\n<tr>\n<td>void*</td>\n<td style=\"text-align:center\">pointer</td>\n<td style=\"text-align:center\">Pointer</td>\n<td style=\"text-align:center\">LPVOID, HANDLE, LP</td>\n</tr>\n</tbody>\n</table>\n<p>若传递的是结构体，需要定义结构体d额类结构，继承com.sun.jna.Structure并实现getFieldOrder方法，来返回字段顺序。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiStruct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Structure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] byteArr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">21</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] intArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">12</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getFieldOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List order = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        order.add(<span class=\"string\">\"byteArr\"</span>);</span><br><span class=\"line\">        order.add(<span class=\"string\">\"intArr\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：在传递参数时，准确的来说是给dll传递了一段内存，并定义了内部的字段顺序，故结构体内的长度需要是确定好的，即结构体内有数组时，一定要先声明大小，分配好内存空间，此时传递的结构体才是完好可用的，否则将会产生 invalid memory  access错误。</strong></p>\n<h2 id=\"回调函数的使用\"><a href=\"#回调函数的使用\" class=\"headerlink\" title=\"回调函数的使用\"></a>回调函数的使用</h2><p>回调的意义在于dll内部声明一个回调函数的接口，并在需要调用的函数中传入回调函数的指针，就可以在函数中指定的位置调用外部实现接口。</p>\n<p>dll中定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(* MyCallback)</span><span class=\"params\">(<span class=\"keyword\">char</span>*errorMsg)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\">EXPORTAPI <span class=\"keyword\">void</span> <span class=\"title\">orderInsert</span><span class=\"params\">(OrderField order,Mycallback func)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>然后在dll中需要使用的地方调用 Mycallback</p>\n<p>java中需要在jna接口中定义回调接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">orderInsert</span><span class=\"params\">(OrderField,Callbackfunc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callbackfunc</span> <span class=\"keyword\">extends</span> <span class=\"title\">Callback</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callback_fun</span><span class=\"params\">(String msg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackfuncImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callbackfunc</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callback_fun</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Message:\"</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">    API api = api.instance;</span><br><span class=\"line\">    API.CallbackfuncImpl func = <span class=\"keyword\">new</span> API.Callbackfuncimpl();</span><br><span class=\"line\">    api.orderInsert(<span class=\"keyword\">new</span> OrderField(),func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JNA简介\"><a href=\"#JNA简介\" class=\"headerlink\" title=\"JNA简介\"></a>JNA简介</h2><p>JNA全称Java Native Access，是一个建立在经典的JNI技术之上的Java开源框架（<a href=\"https://github.com/java-native-access/jna）。\" target=\"_blank\" rel=\"noopener\">https://github.com/java-native-access/jna）。</a><br>JNA提供一组Java工具类用于在运行期动态访问系统本地库（native library：如Window的dll）而不需要编写任何Native/JNI代码。<br>开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射。</p>\n<p><a href=\"&quot;https://github.com/java-native-access/jna/releases&quot;\">jar下载地址</a></p>\n<p><strong>注意点：Jna只能调用dll中的function，而不能调用method。</strong> 解决方法，包装一个原生的dll去调用dll中类的method，只要dll能正常使用，即可通过Jna调用包装后的dll中的function。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>在java中引入jna.jar</li>\n<li>创建接口继承com.sun.jna.Library</li>\n<li>声明需要调用的接口</li>\n<li>使用接口的实例来调用接口中的方法</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TrApi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Library</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    TrApi TRADERINSTANCE = Native.loadLibrary(<span class=\"string\">\"USTPtraderapiAF\"</span>, TrApi.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CreateFtdcTraderApi</span><span class=\"params\">(String pszFlowPath)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">    Trapi api = Trapi.TRADERINSTANCE;</span><br><span class=\"line\">    api.CreateFtdcTraderApi(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中对应的参数需要遵循native<-->java的映射关系。</--></p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>Native Type</th>\n<th style=\"text-align:center\">Size</th>\n<th style=\"text-align:center\">Java Type</th>\n<th style=\"text-align:center\">Common Windows Types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td style=\"text-align:center\">8-bit integer</td>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">BYTE, TCHAR</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:center\">16-bit integer</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">WORD</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td style=\"text-align:center\">16/32-bit character</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">TCHAR</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:center\">32-bit integer</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">DWORD</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:center\">boolean value</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">BOOL</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:center\">32/64-bit integer</td>\n<td style=\"text-align:center\">NativeLong</td>\n<td style=\"text-align:center\">LONG</td>\n</tr>\n<tr>\n<td>long long</td>\n<td style=\"text-align:center\">64-bit integer</td>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">__int64</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:center\">32-bit FP</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:center\">64-bit FP</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>char*</td>\n<td style=\"text-align:center\">C string</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">LPTCSTR</td>\n</tr>\n<tr>\n<td>void*</td>\n<td style=\"text-align:center\">pointer</td>\n<td style=\"text-align:center\">Pointer</td>\n<td style=\"text-align:center\">LPVOID, HANDLE, LP</td>\n</tr>\n</tbody>\n</table>\n<p>若传递的是结构体，需要定义结构体d额类结构，继承com.sun.jna.Structure并实现getFieldOrder方法，来返回字段顺序。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiStruct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Structure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] byteArr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">21</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] intArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">12</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getFieldOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List order = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        order.add(<span class=\"string\">\"byteArr\"</span>);</span><br><span class=\"line\">        order.add(<span class=\"string\">\"intArr\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：在传递参数时，准确的来说是给dll传递了一段内存，并定义了内部的字段顺序，故结构体内的长度需要是确定好的，即结构体内有数组时，一定要先声明大小，分配好内存空间，此时传递的结构体才是完好可用的，否则将会产生 invalid memory  access错误。</strong></p>\n<h2 id=\"回调函数的使用\"><a href=\"#回调函数的使用\" class=\"headerlink\" title=\"回调函数的使用\"></a>回调函数的使用</h2><p>回调的意义在于dll内部声明一个回调函数的接口，并在需要调用的函数中传入回调函数的指针，就可以在函数中指定的位置调用外部实现接口。</p>\n<p>dll中定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(* MyCallback)</span><span class=\"params\">(<span class=\"keyword\">char</span>*errorMsg)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\">EXPORTAPI <span class=\"keyword\">void</span> <span class=\"title\">orderInsert</span><span class=\"params\">(OrderField order,Mycallback func)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>然后在dll中需要使用的地方调用 Mycallback</p>\n<p>java中需要在jna接口中定义回调接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">orderInsert</span><span class=\"params\">(OrderField,Callbackfunc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callbackfunc</span> <span class=\"keyword\">extends</span> <span class=\"title\">Callback</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callback_fun</span><span class=\"params\">(String msg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackfuncImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callbackfunc</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callback_fun</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Message:\"</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">    API api = api.instance;</span><br><span class=\"line\">    API.CallbackfuncImpl func = <span class=\"keyword\">new</span> API.Callbackfuncimpl();</span><br><span class=\"line\">    api.orderInsert(<span class=\"keyword\">new</span> OrderField(),func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"GoogleTest使用指南(一)基础","date":"2018-06-12T04:04:17.000Z","_content":"\n## 下载，编译\n\n官方代码托管于[github](https://github.com/google/googletest),使用gitclone拉到本地。\n\n进入googletest/gooletest/msvc目录下，可以直接用vs打开gtest.sln解决方案。\n\n接着直接编译gtest模块，\n\n__若编译失败__,打开“解决方案资源管理器”，右键打开项目“属性”，在C/C++ --> “预处理器”--> “预处理定义”中增加以下行即可：\n\n_VARIADIC_MAX=10;\n\n在debug目录下生成gtestd.lib，将gtestd.lib和 gtest/include/gtest头文件目录包含进入待测试的项目。\n\n在VS工程中，添加c/c++工程中外部头文件及库的基本步骤：\n\n    * 添加工程的头文件目录：工程---属性---配置属性---c/c++---常规---附加包含目录：加上头文件存放目录。\n\n    * 添加文件引用的lib静态库路径：工程---属性---配置属性---链接器---常规---附加库目录：加上lib文件存放目录。然后添加工程引用的lib文件名：工程---属性---配置属性---链接器---输入---附加依赖项：加上lib文件名。\n\n    * 若项目是静态链接库，则在(库管理器->常规)里添加你引用库的库目录和依赖的lib名称。\n\n    * 添加工程引用的dll动态库：把引用的dll放到工程的可执行文件所在的目录下。\n\n## 使用\n\n* 在源文件中包含头文件  \n\n```c++\n    #include <gtest/gtest.h>\n```\n\n* 编写测试用例\n\n__待测函数__：\n\n```c++\n    int Foo(int a,int b) {\n        if (b!=0) {\n            return a%b;\n        }\n    else return 0;\n}\n```\n\n__编写测试用例__：\n\n```c++\nTEST(FooTest, Calmod)\n{\n    EXPECT_EQ(2, Foo(10, 4));\n    EXPECT_EQ(3, Foo(10, 7));\n}\n```\n\n其中，第一个参数为待测函数名首字母大写+Test。\nEXPECT_EQ则是GTest断言的一种形式。\n断言有两大类。\n\n+ ASSERT_* 当检查点失败时，退出当前函数，被认为是fatal错误。\n+ EXPERT_* 当检查点失败时，继续往下执行。  \n\n__运行main函数执行测试__：\n\n```c++\nint main(int argc, char* argv[])\n{\n    testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n```\n\ntesting::InitGoogleTest(&argc, argv);\ngtest的测试案例允许接收一系列的命令行参数，因此，我们将命令行参数传递给gtest，进行一些初始化操作。\n\n**RUN_ALL_TEST()运行源文件内定义的所有测试用例，并根据其返回值判断其所包含的测试用例是否通过。故，一定要接受并返回！！！**\n\n__测试截图__:\n\n![screenshot](https://blog.felixplanet.cn/images/googletest_1.png)","source":"_posts/GoogleTest使用指南.md","raw":"---\ntitle: GoogleTest使用指南(一)基础\ndate: 2018-06-12 12:04:17\ntags: GoogleTest\ncategories: 技术\n---\n\n## 下载，编译\n\n官方代码托管于[github](https://github.com/google/googletest),使用gitclone拉到本地。\n\n进入googletest/gooletest/msvc目录下，可以直接用vs打开gtest.sln解决方案。\n\n接着直接编译gtest模块，\n\n__若编译失败__,打开“解决方案资源管理器”，右键打开项目“属性”，在C/C++ --> “预处理器”--> “预处理定义”中增加以下行即可：\n\n_VARIADIC_MAX=10;\n\n在debug目录下生成gtestd.lib，将gtestd.lib和 gtest/include/gtest头文件目录包含进入待测试的项目。\n\n在VS工程中，添加c/c++工程中外部头文件及库的基本步骤：\n\n    * 添加工程的头文件目录：工程---属性---配置属性---c/c++---常规---附加包含目录：加上头文件存放目录。\n\n    * 添加文件引用的lib静态库路径：工程---属性---配置属性---链接器---常规---附加库目录：加上lib文件存放目录。然后添加工程引用的lib文件名：工程---属性---配置属性---链接器---输入---附加依赖项：加上lib文件名。\n\n    * 若项目是静态链接库，则在(库管理器->常规)里添加你引用库的库目录和依赖的lib名称。\n\n    * 添加工程引用的dll动态库：把引用的dll放到工程的可执行文件所在的目录下。\n\n## 使用\n\n* 在源文件中包含头文件  \n\n```c++\n    #include <gtest/gtest.h>\n```\n\n* 编写测试用例\n\n__待测函数__：\n\n```c++\n    int Foo(int a,int b) {\n        if (b!=0) {\n            return a%b;\n        }\n    else return 0;\n}\n```\n\n__编写测试用例__：\n\n```c++\nTEST(FooTest, Calmod)\n{\n    EXPECT_EQ(2, Foo(10, 4));\n    EXPECT_EQ(3, Foo(10, 7));\n}\n```\n\n其中，第一个参数为待测函数名首字母大写+Test。\nEXPECT_EQ则是GTest断言的一种形式。\n断言有两大类。\n\n+ ASSERT_* 当检查点失败时，退出当前函数，被认为是fatal错误。\n+ EXPERT_* 当检查点失败时，继续往下执行。  \n\n__运行main函数执行测试__：\n\n```c++\nint main(int argc, char* argv[])\n{\n    testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n```\n\ntesting::InitGoogleTest(&argc, argv);\ngtest的测试案例允许接收一系列的命令行参数，因此，我们将命令行参数传递给gtest，进行一些初始化操作。\n\n**RUN_ALL_TEST()运行源文件内定义的所有测试用例，并根据其返回值判断其所包含的测试用例是否通过。故，一定要接受并返回！！！**\n\n__测试截图__:\n\n![screenshot](https://blog.felixplanet.cn/images/googletest_1.png)","slug":"GoogleTest使用指南","published":1,"updated":"2018-06-19T02:22:48.705Z","_id":"cjicv29pf0002mww3nirdtaoj","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"下载，编译\"><a href=\"#下载，编译\" class=\"headerlink\" title=\"下载，编译\"></a>下载，编译</h2><p>官方代码托管于<a href=\"https://github.com/google/googletest\" target=\"_blank\" rel=\"noopener\">github</a>,使用gitclone拉到本地。</p>\n<p>进入googletest/gooletest/msvc目录下，可以直接用vs打开gtest.sln解决方案。</p>\n<p>接着直接编译gtest模块，</p>\n<p><strong>若编译失败</strong>,打开“解决方案资源管理器”，右键打开项目“属性”，在C/C++ –&gt; “预处理器”–&gt; “预处理定义”中增加以下行即可：</p>\n<p>_VARIADIC_MAX=10;</p>\n<p>在debug目录下生成gtestd.lib，将gtestd.lib和 gtest/include/gtest头文件目录包含进入待测试的项目。</p>\n<p>在VS工程中，添加c/c++工程中外部头文件及库的基本步骤：</p>\n<pre><code>* 添加工程的头文件目录：工程---属性---配置属性---c/c++---常规---附加包含目录：加上头文件存放目录。\n\n* 添加文件引用的lib静态库路径：工程---属性---配置属性---链接器---常规---附加库目录：加上lib文件存放目录。然后添加工程引用的lib文件名：工程---属性---配置属性---链接器---输入---附加依赖项：加上lib文件名。\n\n* 若项目是静态链接库，则在(库管理器-&gt;常规)里添加你引用库的库目录和依赖的lib名称。\n\n* 添加工程引用的dll动态库：把引用的dll放到工程的可执行文件所在的目录下。\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>在源文件中包含头文件  </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtest/gtest.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写测试用例</li>\n</ul>\n<p><strong>待测函数</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a%b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>编写测试用例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEST(FooTest, Calmod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    EXPECT_EQ(<span class=\"number\">2</span>, Foo(<span class=\"number\">10</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">    EXPECT_EQ(<span class=\"number\">3</span>, Foo(<span class=\"number\">10</span>, <span class=\"number\">7</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，第一个参数为待测函数名首字母大写+Test。<br>EXPECT_EQ则是GTest断言的一种形式。<br>断言有两大类。</p>\n<ul>\n<li>ASSERT_* 当检查点失败时，退出当前函数，被认为是fatal错误。</li>\n<li>EXPERT_* 当检查点失败时，继续往下执行。  </li>\n</ul>\n<p><strong>运行main函数执行测试</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    testing::InitGoogleTest(&amp;argc, argv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RUN_ALL_TESTS();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>testing::InitGoogleTest(&amp;argc, argv);<br>gtest的测试案例允许接收一系列的命令行参数，因此，我们将命令行参数传递给gtest，进行一些初始化操作。</p>\n<p><strong>RUN_ALL_TEST()运行源文件内定义的所有测试用例，并根据其返回值判断其所包含的测试用例是否通过。故，一定要接受并返回！！！</strong></p>\n<p><strong>测试截图</strong>:</p>\n<p><img src=\"https://blog.felixplanet.cn/images/googletest_1.png\" alt=\"screenshot\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载，编译\"><a href=\"#下载，编译\" class=\"headerlink\" title=\"下载，编译\"></a>下载，编译</h2><p>官方代码托管于<a href=\"https://github.com/google/googletest\" target=\"_blank\" rel=\"noopener\">github</a>,使用gitclone拉到本地。</p>\n<p>进入googletest/gooletest/msvc目录下，可以直接用vs打开gtest.sln解决方案。</p>\n<p>接着直接编译gtest模块，</p>\n<p><strong>若编译失败</strong>,打开“解决方案资源管理器”，右键打开项目“属性”，在C/C++ –&gt; “预处理器”–&gt; “预处理定义”中增加以下行即可：</p>\n<p>_VARIADIC_MAX=10;</p>\n<p>在debug目录下生成gtestd.lib，将gtestd.lib和 gtest/include/gtest头文件目录包含进入待测试的项目。</p>\n<p>在VS工程中，添加c/c++工程中外部头文件及库的基本步骤：</p>\n<pre><code>* 添加工程的头文件目录：工程---属性---配置属性---c/c++---常规---附加包含目录：加上头文件存放目录。\n\n* 添加文件引用的lib静态库路径：工程---属性---配置属性---链接器---常规---附加库目录：加上lib文件存放目录。然后添加工程引用的lib文件名：工程---属性---配置属性---链接器---输入---附加依赖项：加上lib文件名。\n\n* 若项目是静态链接库，则在(库管理器-&gt;常规)里添加你引用库的库目录和依赖的lib名称。\n\n* 添加工程引用的dll动态库：把引用的dll放到工程的可执行文件所在的目录下。\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>在源文件中包含头文件  </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtest/gtest.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写测试用例</li>\n</ul>\n<p><strong>待测函数</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a%b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>编写测试用例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEST(FooTest, Calmod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    EXPECT_EQ(<span class=\"number\">2</span>, Foo(<span class=\"number\">10</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">    EXPECT_EQ(<span class=\"number\">3</span>, Foo(<span class=\"number\">10</span>, <span class=\"number\">7</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，第一个参数为待测函数名首字母大写+Test。<br>EXPECT_EQ则是GTest断言的一种形式。<br>断言有两大类。</p>\n<ul>\n<li>ASSERT_* 当检查点失败时，退出当前函数，被认为是fatal错误。</li>\n<li>EXPERT_* 当检查点失败时，继续往下执行。  </li>\n</ul>\n<p><strong>运行main函数执行测试</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    testing::InitGoogleTest(&amp;argc, argv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RUN_ALL_TESTS();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>testing::InitGoogleTest(&amp;argc, argv);<br>gtest的测试案例允许接收一系列的命令行参数，因此，我们将命令行参数传递给gtest，进行一些初始化操作。</p>\n<p><strong>RUN_ALL_TEST()运行源文件内定义的所有测试用例，并根据其返回值判断其所包含的测试用例是否通过。故，一定要接受并返回！！！</strong></p>\n<p><strong>测试截图</strong>:</p>\n<p><img src=\"https://blog.felixplanet.cn/images/googletest_1.png\" alt=\"screenshot\"></p>\n"},{"title":"IDEA使用技巧","date":"2018-05-03T07:54:20.000Z","_content":"\n最近也尝试着从Eclipse转向Idea。总结一些常见的使用技巧，快捷操作。\n\n**快捷跳转**\n\n\n 1. 不同视图的跳转。project视图是1， 则可以使用\n\n    >  Alt + 1\n\n 2. 项目之间的跳转。 \n\n    > Crtl + Alt + [ / ]\n\n 3. 查看最近使用的文件\n\n    >  Crtl + E\n\n 4. 查找命令的快捷键\n    \n    > Ctrl + Shift + A\n\n 5. 跳转到上次编辑的位置\n    \n    > Ctrl + Shift + Backspace\n\n 6. 添加书签并跳转\n \n    >  Ctrl + F11  + 书签号    添加书签\n    >  Ctrl + 书签号    跳转到指定书签\n\n 7. 添加收藏\n\n    >  Alt + Shift + F\n\n**快速查找**\n\n 1. 查找类文件\n    \n    > Ctrl + N\n\n 2. 查找文件\n\n    >  Ctrl + Shift + N\n\n 3. 查找符号（函数，字段）\n\n    >  Ctrl + Alt + Shift + N\n\n 4. 查找字符串\n\n    >  Ctrl + Shift + F\n\n**列操作**\n\n 1. 大小写切换\n\n    >  Ctrl + Shift + U\n\n 2. 格式化代码\n\n    >  Ctrl + Alt + Shift +L\n\n 3. 选中所有相同字串\n\n    >  Ctrl + Alt + Shift + J\n\n\n**PostFix**\n\n 1. .fori      for循环 i++\n \n 2. .sout      系统输出\n \n 3. 变量名.field   自动生成一个对应的成员变量\n \n 4. obj.nn     obj != null \n \n\n**重构**\n\n 1. 重命名\n \n    > Shift + F6\n\n 2. 抽取函数\n\n    > Ctrl + Shift + M\n\n 3. 撤销改动（VCS）\n \n    > Ctrl + Alt + Z\n\n 4. 查看改动历史\n \n    > Alt + L\n\n 5. 拷贝当前文件至目录\n \n    > F5\n\n 6. 移动当前文件至目录\n \n    > F6\n\n 7. 展示文件结构\n \n    > Ctrl + F12\n\n 8. 展示Maven依赖结构\n \n    > Ctrl + Alt + Shift + U\n\n 9. 展示函数调用层次\n \n    > Ctrl + Alt + H\n\n \n\n","source":"_posts/IDEA使用技巧.md","raw":"---\ntitle: IDEA使用技巧\ndate: 2018-05-03 15:54:20\ntags: IDE\ncategories: 技术\n---\n\n最近也尝试着从Eclipse转向Idea。总结一些常见的使用技巧，快捷操作。\n\n**快捷跳转**\n\n\n 1. 不同视图的跳转。project视图是1， 则可以使用\n\n    >  Alt + 1\n\n 2. 项目之间的跳转。 \n\n    > Crtl + Alt + [ / ]\n\n 3. 查看最近使用的文件\n\n    >  Crtl + E\n\n 4. 查找命令的快捷键\n    \n    > Ctrl + Shift + A\n\n 5. 跳转到上次编辑的位置\n    \n    > Ctrl + Shift + Backspace\n\n 6. 添加书签并跳转\n \n    >  Ctrl + F11  + 书签号    添加书签\n    >  Ctrl + 书签号    跳转到指定书签\n\n 7. 添加收藏\n\n    >  Alt + Shift + F\n\n**快速查找**\n\n 1. 查找类文件\n    \n    > Ctrl + N\n\n 2. 查找文件\n\n    >  Ctrl + Shift + N\n\n 3. 查找符号（函数，字段）\n\n    >  Ctrl + Alt + Shift + N\n\n 4. 查找字符串\n\n    >  Ctrl + Shift + F\n\n**列操作**\n\n 1. 大小写切换\n\n    >  Ctrl + Shift + U\n\n 2. 格式化代码\n\n    >  Ctrl + Alt + Shift +L\n\n 3. 选中所有相同字串\n\n    >  Ctrl + Alt + Shift + J\n\n\n**PostFix**\n\n 1. .fori      for循环 i++\n \n 2. .sout      系统输出\n \n 3. 变量名.field   自动生成一个对应的成员变量\n \n 4. obj.nn     obj != null \n \n\n**重构**\n\n 1. 重命名\n \n    > Shift + F6\n\n 2. 抽取函数\n\n    > Ctrl + Shift + M\n\n 3. 撤销改动（VCS）\n \n    > Ctrl + Alt + Z\n\n 4. 查看改动历史\n \n    > Alt + L\n\n 5. 拷贝当前文件至目录\n \n    > F5\n\n 6. 移动当前文件至目录\n \n    > F6\n\n 7. 展示文件结构\n \n    > Ctrl + F12\n\n 8. 展示Maven依赖结构\n \n    > Ctrl + Alt + Shift + U\n\n 9. 展示函数调用层次\n \n    > Ctrl + Alt + H\n\n \n\n","slug":"IDEA使用技巧","published":1,"updated":"2018-05-04T03:44:11.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjicv29pk0006mww3w6e6yfdc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近也尝试着从Eclipse转向Idea。总结一些常见的使用技巧，快捷操作。</p>\n<p><strong>快捷跳转</strong></p>\n<ol>\n<li><p>不同视图的跳转。project视图是1， 则可以使用</p>\n<blockquote>\n<p> Alt + 1</p>\n</blockquote>\n</li>\n<li><p>项目之间的跳转。 </p>\n<blockquote>\n<p>Crtl + Alt + [ / ]</p>\n</blockquote>\n</li>\n<li><p>查看最近使用的文件</p>\n<blockquote>\n<p> Crtl + E</p>\n</blockquote>\n</li>\n<li><p>查找命令的快捷键</p>\n<blockquote>\n<p>Ctrl + Shift + A</p>\n</blockquote>\n</li>\n<li><p>跳转到上次编辑的位置</p>\n<blockquote>\n<p>Ctrl + Shift + Backspace</p>\n</blockquote>\n</li>\n<li><p>添加书签并跳转</p>\n<blockquote>\n<p> Ctrl + F11  + 书签号    添加书签<br> Ctrl + 书签号    跳转到指定书签</p>\n</blockquote>\n</li>\n<li><p>添加收藏</p>\n<blockquote>\n<p> Alt + Shift + F</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>快速查找</strong></p>\n<ol>\n<li><p>查找类文件</p>\n<blockquote>\n<p>Ctrl + N</p>\n</blockquote>\n</li>\n<li><p>查找文件</p>\n<blockquote>\n<p> Ctrl + Shift + N</p>\n</blockquote>\n</li>\n<li><p>查找符号（函数，字段）</p>\n<blockquote>\n<p> Ctrl + Alt + Shift + N</p>\n</blockquote>\n</li>\n<li><p>查找字符串</p>\n<blockquote>\n<p> Ctrl + Shift + F</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>列操作</strong></p>\n<ol>\n<li><p>大小写切换</p>\n<blockquote>\n<p> Ctrl + Shift + U</p>\n</blockquote>\n</li>\n<li><p>格式化代码</p>\n<blockquote>\n<p> Ctrl + Alt + Shift +L</p>\n</blockquote>\n</li>\n<li><p>选中所有相同字串</p>\n<blockquote>\n<p> Ctrl + Alt + Shift + J</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>PostFix</strong></p>\n<ol>\n<li><p>.fori      for循环 i++</p>\n</li>\n<li><p>.sout      系统输出</p>\n</li>\n<li><p>变量名.field   自动生成一个对应的成员变量</p>\n</li>\n<li><p>obj.nn     obj != null </p>\n</li>\n</ol>\n<p><strong>重构</strong></p>\n<ol>\n<li><p>重命名</p>\n<blockquote>\n<p>Shift + F6</p>\n</blockquote>\n</li>\n<li><p>抽取函数</p>\n<blockquote>\n<p>Ctrl + Shift + M</p>\n</blockquote>\n</li>\n<li><p>撤销改动（VCS）</p>\n<blockquote>\n<p>Ctrl + Alt + Z</p>\n</blockquote>\n</li>\n<li><p>查看改动历史</p>\n<blockquote>\n<p>Alt + L</p>\n</blockquote>\n</li>\n<li><p>拷贝当前文件至目录</p>\n<blockquote>\n<p>F5</p>\n</blockquote>\n</li>\n<li><p>移动当前文件至目录</p>\n<blockquote>\n<p>F6</p>\n</blockquote>\n</li>\n<li><p>展示文件结构</p>\n<blockquote>\n<p>Ctrl + F12</p>\n</blockquote>\n</li>\n<li><p>展示Maven依赖结构</p>\n<blockquote>\n<p>Ctrl + Alt + Shift + U</p>\n</blockquote>\n</li>\n<li><p>展示函数调用层次</p>\n<blockquote>\n<p>Ctrl + Alt + H</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近也尝试着从Eclipse转向Idea。总结一些常见的使用技巧，快捷操作。</p>\n<p><strong>快捷跳转</strong></p>\n<ol>\n<li><p>不同视图的跳转。project视图是1， 则可以使用</p>\n<blockquote>\n<p> Alt + 1</p>\n</blockquote>\n</li>\n<li><p>项目之间的跳转。 </p>\n<blockquote>\n<p>Crtl + Alt + [ / ]</p>\n</blockquote>\n</li>\n<li><p>查看最近使用的文件</p>\n<blockquote>\n<p> Crtl + E</p>\n</blockquote>\n</li>\n<li><p>查找命令的快捷键</p>\n<blockquote>\n<p>Ctrl + Shift + A</p>\n</blockquote>\n</li>\n<li><p>跳转到上次编辑的位置</p>\n<blockquote>\n<p>Ctrl + Shift + Backspace</p>\n</blockquote>\n</li>\n<li><p>添加书签并跳转</p>\n<blockquote>\n<p> Ctrl + F11  + 书签号    添加书签<br> Ctrl + 书签号    跳转到指定书签</p>\n</blockquote>\n</li>\n<li><p>添加收藏</p>\n<blockquote>\n<p> Alt + Shift + F</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>快速查找</strong></p>\n<ol>\n<li><p>查找类文件</p>\n<blockquote>\n<p>Ctrl + N</p>\n</blockquote>\n</li>\n<li><p>查找文件</p>\n<blockquote>\n<p> Ctrl + Shift + N</p>\n</blockquote>\n</li>\n<li><p>查找符号（函数，字段）</p>\n<blockquote>\n<p> Ctrl + Alt + Shift + N</p>\n</blockquote>\n</li>\n<li><p>查找字符串</p>\n<blockquote>\n<p> Ctrl + Shift + F</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>列操作</strong></p>\n<ol>\n<li><p>大小写切换</p>\n<blockquote>\n<p> Ctrl + Shift + U</p>\n</blockquote>\n</li>\n<li><p>格式化代码</p>\n<blockquote>\n<p> Ctrl + Alt + Shift +L</p>\n</blockquote>\n</li>\n<li><p>选中所有相同字串</p>\n<blockquote>\n<p> Ctrl + Alt + Shift + J</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>PostFix</strong></p>\n<ol>\n<li><p>.fori      for循环 i++</p>\n</li>\n<li><p>.sout      系统输出</p>\n</li>\n<li><p>变量名.field   自动生成一个对应的成员变量</p>\n</li>\n<li><p>obj.nn     obj != null </p>\n</li>\n</ol>\n<p><strong>重构</strong></p>\n<ol>\n<li><p>重命名</p>\n<blockquote>\n<p>Shift + F6</p>\n</blockquote>\n</li>\n<li><p>抽取函数</p>\n<blockquote>\n<p>Ctrl + Shift + M</p>\n</blockquote>\n</li>\n<li><p>撤销改动（VCS）</p>\n<blockquote>\n<p>Ctrl + Alt + Z</p>\n</blockquote>\n</li>\n<li><p>查看改动历史</p>\n<blockquote>\n<p>Alt + L</p>\n</blockquote>\n</li>\n<li><p>拷贝当前文件至目录</p>\n<blockquote>\n<p>F5</p>\n</blockquote>\n</li>\n<li><p>移动当前文件至目录</p>\n<blockquote>\n<p>F6</p>\n</blockquote>\n</li>\n<li><p>展示文件结构</p>\n<blockquote>\n<p>Ctrl + F12</p>\n</blockquote>\n</li>\n<li><p>展示Maven依赖结构</p>\n<blockquote>\n<p>Ctrl + Alt + Shift + U</p>\n</blockquote>\n</li>\n<li><p>展示函数调用层次</p>\n<blockquote>\n<p>Ctrl + Alt + H</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"test","date":"2018-04-21T07:40:52.000Z","_content":"\n\n{% iframe //player.bilibili.com/player.html?aid=11722455&cid=19364471&page=1 800 600 %}\n\n{% aplayer \"秋千\" \"乃木坂46\" \"https://blog.felixplanet.cn/music/qiuqian.m4a\" \"https://blog.felixplanet.cn/images/nogicover7.jpg\" \"autoplay\" %}\n\n\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2018-04-21 15:40:52\ntags: 测试\ncategories: magica\n---\n\n\n{% iframe //player.bilibili.com/player.html?aid=11722455&cid=19364471&page=1 800 600 %}\n\n{% aplayer \"秋千\" \"乃木坂46\" \"https://blog.felixplanet.cn/music/qiuqian.m4a\" \"https://blog.felixplanet.cn/images/nogicover7.jpg\" \"autoplay\" %}\n\n\n\n","slug":"test","published":1,"updated":"2018-04-24T09:44:48.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjicv29pl0007mww3kf6cg8bv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><iframe src=\"//player.bilibili.com/player.html?aid=11722455&cid=19364471&page=1\" width=\"800\" height=\"600\" frameborder=\"0\" allowfullscreen></iframe>\n\n        <div id=\"aplayer-XAdRBDFV\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-XAdRBDFV\"),\n            narrow: false,\n            autoplay: true,\n            showlrc: false,\n            music: {\n              title: \"秋千\",\n              author: \"乃木坂46\",\n              url: \"https://blog.felixplanet.cn/music/qiuqian.m4a\",\n              pic: \"https://blog.felixplanet.cn/images/nogicover7.jpg\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n","site":{"data":{}},"excerpt":"","more":"<iframe src=\"//player.bilibili.com/player.html?aid=11722455&cid=19364471&page=1\" width=\"800\" height=\"600\" frameborder=\"0\" allowfullscreen></iframe>\n\n        <div id=\"aplayer-XAdRBDFV\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-XAdRBDFV\"),\n            narrow: false,\n            autoplay: true,\n            showlrc: false,\n            music: {\n              title: \"秋千\",\n              author: \"乃木坂46\",\n              url: \"https://blog.felixplanet.cn/music/qiuqian.m4a\",\n              pic: \"https://blog.felixplanet.cn/images/nogicover7.jpg\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n"},{"title":"ajax跨域问题及其解决方案","date":"2018-05-03T04:40:02.000Z","_content":"\najax跨域问题是经常遇到的了，这次总结一下问题出现的原因和解决方案。\n\n什么情况下会出现跨域呢？\n\n 1. 浏览器处于安全因素，对请求进行了限制（极有可能请求是200的）\n 2. 发出的请求是XHR请求，即XMLHttpRequest，当我们请求的是script类型或者是其他静态资源时，不一定会产生跨域问题。\n 3. 请求的资源是跨域的，即协议，域名，端口，三者任一不一致时，才满足跨域的基本条件。\n\n针对浏览器的限制，我们可以使用命令行启动来解决，chrome可以直接 \n> --disable-web-security\n\n第二种解决方案是，使用jsonp来请求，这时候，前台ajax里规定好对应的回调函数，即可对应解析出后台返回的包装好的js代码。\n\n```javascript\n$.ajax({\n\t\ttype: \"get\",\n\t\turl: base+\"/getJsonp\",\n\t\tdataType: \"jsonp\",\n\t\tjsonp: \"callback\", //默认是callback，和后台对应\n\t\tsuccess: function(data) {\n\t\t\tconsole.log(data);\n\t\t}\n\t});\n```\n\n但是jsonp有很大的弊端。首先是服务器需要改动，若是spring框架，需要增加AbstractJsonpResponseBodyAdvice的切片，规定回调函数的名称，若是第三方的api，GG。其次是只支持GET的请求和jsonp的数据类型。可以说，jsonp的方式，适用于后台可控的情况。而且代码需要配合改动。\n\n那么在被调用方，还有什么方式可以快捷地支持跨域呢？\n\n 1. Filter. 应用服务器通过增加filter来在 response header里加入跨域的支持。\n\n```java\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tHttpServletResponse res = (HttpServletResponse) response;\n\t\t//让所有origin域名都支持跨域\n\t\tHttpServletRequest req = (HttpServletRequest) request;\n\t\t\n\t\tString origin = req.getHeader(\"origin\");\n\t\tif (!org.springframework.util.StringUtils.isEmpty(origin)) {\n\t\t\tres.addHeader(\"Access-Control-Allow-Origin\", origin);\n\t\t}\n\t\t\n\t\t//让所有header都支持跨域\n\t\tString header = req.getHeader(\"Access-Control-Request-Headers\");\n\t\tif (!org.springframework.util.StringUtils.isEmpty(header)) {\n\t\t\tres.addHeader(\"Access-Control-Allow-Headers\", header);\n\t\t}\n\t\t\n\t\tres.addHeader(\"Access-Control-Allow-Methods\", \"GET\");\n\t\tres.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\t\tres.addHeader(\"Access-Control-Max-Age\", \"3600\");\n\t\t\n\t\tchain.doFilter(request, response);\n\t\t\n\t}\n```\n\n这样的话浏览器在接受到response之后，在header里面读到允许跨域的范围信息，即可支持跨域。（若是spring框架，更快捷的方式是在controller的 类或者方法上加上 ***@CrossOrigin*** 注解）\n\n如果不想修改应用服务器呢？还可以在静态服务器上设置好参数，是一样的作用。以Nginx为例：\n\n```java\nlocation ~ /{\n    add_header Access-Control-Allow-Origin $http_origin;\n    add_header Access-Control-Allow-Headers $http_access_control_request_headers;\n    add_header Access-Control-Allow-Methods *;\n    add_header Access-Control-Max-Age 3600;\n    add_header Access-Control-Allow-Credentials true;\n  }\n```\n在对应vhost的配置文件里加入跨域支持，reload，即可支持跨域。\n\n终极的解决方案，是我们可以直接配置nginx反向代理，把所有的请求路径代理到nginx服务器上。\n\n**关于Nginx的学习，待续！**\n\n\n","source":"_posts/ajax跨域问题及其解决方案.md","raw":"---\ntitle: ajax跨域问题及其解决方案\ndate: 2018-05-03 12:40:02\ntags: ajax\ncategories: 技术\n---\n\najax跨域问题是经常遇到的了，这次总结一下问题出现的原因和解决方案。\n\n什么情况下会出现跨域呢？\n\n 1. 浏览器处于安全因素，对请求进行了限制（极有可能请求是200的）\n 2. 发出的请求是XHR请求，即XMLHttpRequest，当我们请求的是script类型或者是其他静态资源时，不一定会产生跨域问题。\n 3. 请求的资源是跨域的，即协议，域名，端口，三者任一不一致时，才满足跨域的基本条件。\n\n针对浏览器的限制，我们可以使用命令行启动来解决，chrome可以直接 \n> --disable-web-security\n\n第二种解决方案是，使用jsonp来请求，这时候，前台ajax里规定好对应的回调函数，即可对应解析出后台返回的包装好的js代码。\n\n```javascript\n$.ajax({\n\t\ttype: \"get\",\n\t\turl: base+\"/getJsonp\",\n\t\tdataType: \"jsonp\",\n\t\tjsonp: \"callback\", //默认是callback，和后台对应\n\t\tsuccess: function(data) {\n\t\t\tconsole.log(data);\n\t\t}\n\t});\n```\n\n但是jsonp有很大的弊端。首先是服务器需要改动，若是spring框架，需要增加AbstractJsonpResponseBodyAdvice的切片，规定回调函数的名称，若是第三方的api，GG。其次是只支持GET的请求和jsonp的数据类型。可以说，jsonp的方式，适用于后台可控的情况。而且代码需要配合改动。\n\n那么在被调用方，还有什么方式可以快捷地支持跨域呢？\n\n 1. Filter. 应用服务器通过增加filter来在 response header里加入跨域的支持。\n\n```java\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tHttpServletResponse res = (HttpServletResponse) response;\n\t\t//让所有origin域名都支持跨域\n\t\tHttpServletRequest req = (HttpServletRequest) request;\n\t\t\n\t\tString origin = req.getHeader(\"origin\");\n\t\tif (!org.springframework.util.StringUtils.isEmpty(origin)) {\n\t\t\tres.addHeader(\"Access-Control-Allow-Origin\", origin);\n\t\t}\n\t\t\n\t\t//让所有header都支持跨域\n\t\tString header = req.getHeader(\"Access-Control-Request-Headers\");\n\t\tif (!org.springframework.util.StringUtils.isEmpty(header)) {\n\t\t\tres.addHeader(\"Access-Control-Allow-Headers\", header);\n\t\t}\n\t\t\n\t\tres.addHeader(\"Access-Control-Allow-Methods\", \"GET\");\n\t\tres.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\t\tres.addHeader(\"Access-Control-Max-Age\", \"3600\");\n\t\t\n\t\tchain.doFilter(request, response);\n\t\t\n\t}\n```\n\n这样的话浏览器在接受到response之后，在header里面读到允许跨域的范围信息，即可支持跨域。（若是spring框架，更快捷的方式是在controller的 类或者方法上加上 ***@CrossOrigin*** 注解）\n\n如果不想修改应用服务器呢？还可以在静态服务器上设置好参数，是一样的作用。以Nginx为例：\n\n```java\nlocation ~ /{\n    add_header Access-Control-Allow-Origin $http_origin;\n    add_header Access-Control-Allow-Headers $http_access_control_request_headers;\n    add_header Access-Control-Allow-Methods *;\n    add_header Access-Control-Max-Age 3600;\n    add_header Access-Control-Allow-Credentials true;\n  }\n```\n在对应vhost的配置文件里加入跨域支持，reload，即可支持跨域。\n\n终极的解决方案，是我们可以直接配置nginx反向代理，把所有的请求路径代理到nginx服务器上。\n\n**关于Nginx的学习，待续！**\n\n\n","slug":"ajax跨域问题及其解决方案","published":1,"updated":"2018-05-03T05:14:45.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjicv29pn0008mww31rmwof3t","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>ajax跨域问题是经常遇到的了，这次总结一下问题出现的原因和解决方案。</p>\n<p>什么情况下会出现跨域呢？</p>\n<ol>\n<li>浏览器处于安全因素，对请求进行了限制（极有可能请求是200的）</li>\n<li>发出的请求是XHR请求，即XMLHttpRequest，当我们请求的是script类型或者是其他静态资源时，不一定会产生跨域问题。</li>\n<li>请求的资源是跨域的，即协议，域名，端口，三者任一不一致时，才满足跨域的基本条件。</li>\n</ol>\n<p>针对浏览器的限制，我们可以使用命令行启动来解决，chrome可以直接 </p>\n<blockquote>\n<p>–disable-web-security</p>\n</blockquote>\n<p>第二种解决方案是，使用jsonp来请求，这时候，前台ajax里规定好对应的回调函数，即可对应解析出后台返回的包装好的js代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\t\ttype: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">\t\turl: base+<span class=\"string\">\"/getJsonp\"</span>,</span><br><span class=\"line\">\t\tdataType: <span class=\"string\">\"jsonp\"</span>,</span><br><span class=\"line\">\t\tjsonp: <span class=\"string\">\"callback\"</span>, <span class=\"comment\">//默认是callback，和后台对应</span></span><br><span class=\"line\">\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是jsonp有很大的弊端。首先是服务器需要改动，若是spring框架，需要增加AbstractJsonpResponseBodyAdvice的切片，规定回调函数的名称，若是第三方的api，GG。其次是只支持GET的请求和jsonp的数据类型。可以说，jsonp的方式，适用于后台可控的情况。而且代码需要配合改动。</p>\n<p>那么在被调用方，还有什么方式可以快捷地支持跨域呢？</p>\n<ol>\n<li>Filter. 应用服务器通过增加filter来在 response header里加入跨域的支持。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\tHttpServletResponse res = (HttpServletResponse) response;</span><br><span class=\"line\">\t<span class=\"comment\">//让所有origin域名都支持跨域</span></span><br><span class=\"line\">\tHttpServletRequest req = (HttpServletRequest) request;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString origin = req.getHeader(<span class=\"string\">\"origin\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!org.springframework.util.StringUtils.isEmpty(origin)) &#123;</span><br><span class=\"line\">\t\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, origin);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//让所有header都支持跨域</span></span><br><span class=\"line\">\tString header = req.getHeader(<span class=\"string\">\"Access-Control-Request-Headers\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!org.springframework.util.StringUtils.isEmpty(header)) &#123;</span><br><span class=\"line\">\t\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, header);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话浏览器在接受到response之后，在header里面读到允许跨域的范围信息，即可支持跨域。（若是spring框架，更快捷的方式是在controller的 类或者方法上加上 <strong><em>@CrossOrigin</em></strong> 注解）</p>\n<p>如果不想修改应用服务器呢？还可以在静态服务器上设置好参数，是一样的作用。以Nginx为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /&#123;</span><br><span class=\"line\">    add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">    add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class=\"line\">    add_header Access-Control-Allow-Methods *;</span><br><span class=\"line\">    add_header Access-Control-Max-Age <span class=\"number\">3600</span>;</span><br><span class=\"line\">    add_header Access-Control-Allow-Credentials <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在对应vhost的配置文件里加入跨域支持，reload，即可支持跨域。</p>\n<p>终极的解决方案，是我们可以直接配置nginx反向代理，把所有的请求路径代理到nginx服务器上。</p>\n<p><strong>关于Nginx的学习，待续！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ajax跨域问题是经常遇到的了，这次总结一下问题出现的原因和解决方案。</p>\n<p>什么情况下会出现跨域呢？</p>\n<ol>\n<li>浏览器处于安全因素，对请求进行了限制（极有可能请求是200的）</li>\n<li>发出的请求是XHR请求，即XMLHttpRequest，当我们请求的是script类型或者是其他静态资源时，不一定会产生跨域问题。</li>\n<li>请求的资源是跨域的，即协议，域名，端口，三者任一不一致时，才满足跨域的基本条件。</li>\n</ol>\n<p>针对浏览器的限制，我们可以使用命令行启动来解决，chrome可以直接 </p>\n<blockquote>\n<p>–disable-web-security</p>\n</blockquote>\n<p>第二种解决方案是，使用jsonp来请求，这时候，前台ajax里规定好对应的回调函数，即可对应解析出后台返回的包装好的js代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\t\ttype: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">\t\turl: base+<span class=\"string\">\"/getJsonp\"</span>,</span><br><span class=\"line\">\t\tdataType: <span class=\"string\">\"jsonp\"</span>,</span><br><span class=\"line\">\t\tjsonp: <span class=\"string\">\"callback\"</span>, <span class=\"comment\">//默认是callback，和后台对应</span></span><br><span class=\"line\">\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是jsonp有很大的弊端。首先是服务器需要改动，若是spring框架，需要增加AbstractJsonpResponseBodyAdvice的切片，规定回调函数的名称，若是第三方的api，GG。其次是只支持GET的请求和jsonp的数据类型。可以说，jsonp的方式，适用于后台可控的情况。而且代码需要配合改动。</p>\n<p>那么在被调用方，还有什么方式可以快捷地支持跨域呢？</p>\n<ol>\n<li>Filter. 应用服务器通过增加filter来在 response header里加入跨域的支持。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\tHttpServletResponse res = (HttpServletResponse) response;</span><br><span class=\"line\">\t<span class=\"comment\">//让所有origin域名都支持跨域</span></span><br><span class=\"line\">\tHttpServletRequest req = (HttpServletRequest) request;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString origin = req.getHeader(<span class=\"string\">\"origin\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!org.springframework.util.StringUtils.isEmpty(origin)) &#123;</span><br><span class=\"line\">\t\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, origin);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//让所有header都支持跨域</span></span><br><span class=\"line\">\tString header = req.getHeader(<span class=\"string\">\"Access-Control-Request-Headers\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!org.springframework.util.StringUtils.isEmpty(header)) &#123;</span><br><span class=\"line\">\t\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, header);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\tres.addHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话浏览器在接受到response之后，在header里面读到允许跨域的范围信息，即可支持跨域。（若是spring框架，更快捷的方式是在controller的 类或者方法上加上 <strong><em>@CrossOrigin</em></strong> 注解）</p>\n<p>如果不想修改应用服务器呢？还可以在静态服务器上设置好参数，是一样的作用。以Nginx为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /&#123;</span><br><span class=\"line\">    add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">    add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class=\"line\">    add_header Access-Control-Allow-Methods *;</span><br><span class=\"line\">    add_header Access-Control-Max-Age <span class=\"number\">3600</span>;</span><br><span class=\"line\">    add_header Access-Control-Allow-Credentials <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在对应vhost的配置文件里加入跨域支持，reload，即可支持跨域。</p>\n<p>终极的解决方案，是我们可以直接配置nginx反向代理，把所有的请求路径代理到nginx服务器上。</p>\n<p><strong>关于Nginx的学习，待续！</strong></p>\n"},{"title":"react音乐播放器","date":"2018-04-25T12:55:34.000Z","_content":"\n在用**hexo**搭建博客的时候，想在页面上展示一首音乐。一开始想到的是直接用网易云的外链播放，本质是在页面上加一个iframe。然而很局限的是，由于现在的版权风暴，许多歌曲已经下架了，而自己加入网易云盘的歌曲，虽然可以自己听，但是并不能用作外链（cookie检查）。\n\n于是想动手做一个h5的页面音乐播放器。在考虑了原生H5之后，发现不太方便，因为引入hexo的话，需要组件化，而原生H5对前端技术要求比较高。于是采用了**ReactJS**。\n\nReactJS一个优点在于，组件化的思想，让不擅长前端的童鞋，也能用组装的方式去完成一个控件。\n\n 1. 使用npm搭建React开发环境\n 只引用react即可，并未采用前端工程化打包webpack。因为我们只需要打包好控件，然后引用js，css即可。\n\n 2. UI。主要是先在入口的index.js里面把控件的结构构建好，然后设计对应的css样式。这样我们的控件就有了一个大体的模样了。\n![样式示例][1]\n \n 3. 逻辑处理。在React的生命周期里，使用 getDefaultProps 方法设置初始的参数，即播放歌曲的信息（之后会考虑读取配置文件）。然后在render方法中对属性值进行事件的操作。比如播放，暂停，下一首...\n\n```javascript\n\trender: function() {\t\t\n\t\treturn (\n\t\t\t<div className=\"musicplayer\">\n\t\t\t\t\t\t\t\n\n\t\t\t\t{/* 音乐专辑图  */}\n\t\t\t\t<TrackInfo track={this.props.tracks[this.state.currentTrackIndex]} />\n\n\t\t\t\t{/* 音乐信息   */}\n\t\t\t\t<Progress progress={this.state.currentTime / this.state.currentTotalTime * 100 + '%'} />\n\n\t\t\t\t{/* 播放进度条  */}\n\t\t\t\t<Controls isPlay={this.state.playStatus} onPlay={this.play} onPrevious={this.previous} onNext={this.next} />\n\n\t\t\t\t{/* 播放时间   */}\n\t\t\t\t<Time currentTime={this.state.currentTime} currentTotalTime={this.state.currentTotalTime} />\n\n\t\t\t\t{/* 音频控件  */}\n\t\t\t\t<audio id=\"audio\" src={this.props.tracks[this.state.currentTrackIndex].mp3Url}></audio>\n\t\t\t</div>\n\t\t);\n\t}\n```\n\n 打包使用，使用npm run build 构建完成，提取出js，和css，在需要使用的页面上 插入div，命名为reactmusicplayer即可。\n \n ![样例][2]\n \n由于缺乏前端功底，实在是不好看，所以还是向网易云妥协了。\n\n**PS： 本地调试的时候，localhost请求个人网站上的静态json文件来完成配置时，遇到了jsonp的ajax跨域问题。将在下阶段研究一哈！**\n \n\n \n\n \n\n\n  [1]: https://blog.felixplanet.cn/images/sample/reactpic1.png\n  [2]: https://blog.felixplanet.cn/images/sample/reactpic2.png","source":"_posts/react音乐播放器.md","raw":"---\ntitle: react音乐播放器\ndate: 2018-04-25 20:55:34\ncategories: 技术\ntags: react\n---\n\n在用**hexo**搭建博客的时候，想在页面上展示一首音乐。一开始想到的是直接用网易云的外链播放，本质是在页面上加一个iframe。然而很局限的是，由于现在的版权风暴，许多歌曲已经下架了，而自己加入网易云盘的歌曲，虽然可以自己听，但是并不能用作外链（cookie检查）。\n\n于是想动手做一个h5的页面音乐播放器。在考虑了原生H5之后，发现不太方便，因为引入hexo的话，需要组件化，而原生H5对前端技术要求比较高。于是采用了**ReactJS**。\n\nReactJS一个优点在于，组件化的思想，让不擅长前端的童鞋，也能用组装的方式去完成一个控件。\n\n 1. 使用npm搭建React开发环境\n 只引用react即可，并未采用前端工程化打包webpack。因为我们只需要打包好控件，然后引用js，css即可。\n\n 2. UI。主要是先在入口的index.js里面把控件的结构构建好，然后设计对应的css样式。这样我们的控件就有了一个大体的模样了。\n![样式示例][1]\n \n 3. 逻辑处理。在React的生命周期里，使用 getDefaultProps 方法设置初始的参数，即播放歌曲的信息（之后会考虑读取配置文件）。然后在render方法中对属性值进行事件的操作。比如播放，暂停，下一首...\n\n```javascript\n\trender: function() {\t\t\n\t\treturn (\n\t\t\t<div className=\"musicplayer\">\n\t\t\t\t\t\t\t\n\n\t\t\t\t{/* 音乐专辑图  */}\n\t\t\t\t<TrackInfo track={this.props.tracks[this.state.currentTrackIndex]} />\n\n\t\t\t\t{/* 音乐信息   */}\n\t\t\t\t<Progress progress={this.state.currentTime / this.state.currentTotalTime * 100 + '%'} />\n\n\t\t\t\t{/* 播放进度条  */}\n\t\t\t\t<Controls isPlay={this.state.playStatus} onPlay={this.play} onPrevious={this.previous} onNext={this.next} />\n\n\t\t\t\t{/* 播放时间   */}\n\t\t\t\t<Time currentTime={this.state.currentTime} currentTotalTime={this.state.currentTotalTime} />\n\n\t\t\t\t{/* 音频控件  */}\n\t\t\t\t<audio id=\"audio\" src={this.props.tracks[this.state.currentTrackIndex].mp3Url}></audio>\n\t\t\t</div>\n\t\t);\n\t}\n```\n\n 打包使用，使用npm run build 构建完成，提取出js，和css，在需要使用的页面上 插入div，命名为reactmusicplayer即可。\n \n ![样例][2]\n \n由于缺乏前端功底，实在是不好看，所以还是向网易云妥协了。\n\n**PS： 本地调试的时候，localhost请求个人网站上的静态json文件来完成配置时，遇到了jsonp的ajax跨域问题。将在下阶段研究一哈！**\n \n\n \n\n \n\n\n  [1]: https://blog.felixplanet.cn/images/sample/reactpic1.png\n  [2]: https://blog.felixplanet.cn/images/sample/reactpic2.png","slug":"react音乐播放器","published":1,"updated":"2018-04-25T13:38:08.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjicv29pr000cmww3ernke9sx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>在用<strong>hexo</strong>搭建博客的时候，想在页面上展示一首音乐。一开始想到的是直接用网易云的外链播放，本质是在页面上加一个iframe。然而很局限的是，由于现在的版权风暴，许多歌曲已经下架了，而自己加入网易云盘的歌曲，虽然可以自己听，但是并不能用作外链（cookie检查）。</p>\n<p>于是想动手做一个h5的页面音乐播放器。在考虑了原生H5之后，发现不太方便，因为引入hexo的话，需要组件化，而原生H5对前端技术要求比较高。于是采用了<strong>ReactJS</strong>。</p>\n<p>ReactJS一个优点在于，组件化的思想，让不擅长前端的童鞋，也能用组装的方式去完成一个控件。</p>\n<ol>\n<li><p>使用npm搭建React开发环境<br>只引用react即可，并未采用前端工程化打包webpack。因为我们只需要打包好控件，然后引用js，css即可。</p>\n</li>\n<li><p>UI。主要是先在入口的index.js里面把控件的结构构建好，然后设计对应的css样式。这样我们的控件就有了一个大体的模样了。<br><img src=\"https://blog.felixplanet.cn/images/sample/reactpic1.png\" alt=\"样式示例\"></p>\n</li>\n<li><p>逻辑处理。在React的生命周期里，使用 getDefaultProps 方法设置初始的参数，即播放歌曲的信息（之后会考虑读取配置文件）。然后在render方法中对属性值进行事件的操作。比如播放，暂停，下一首…</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t&lt;div className=<span class=\"string\">\"musicplayer\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音乐专辑图  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;TrackInfo track=&#123;<span class=\"keyword\">this</span>.props.tracks[<span class=\"keyword\">this</span>.state.currentTrackIndex]&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音乐信息   */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Progress progress=&#123;<span class=\"keyword\">this</span>.state.currentTime / <span class=\"keyword\">this</span>.state.currentTotalTime * <span class=\"number\">100</span> + <span class=\"string\">'%'</span>&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 播放进度条  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Controls isPlay=&#123;<span class=\"keyword\">this</span>.state.playStatus&#125; onPlay=&#123;<span class=\"keyword\">this</span>.play&#125; onPrevious=&#123;<span class=\"keyword\">this</span>.previous&#125; onNext=&#123;<span class=\"keyword\">this</span>.next&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 播放时间   */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Time currentTime=&#123;<span class=\"keyword\">this</span>.state.currentTime&#125; currentTotalTime=&#123;<span class=\"keyword\">this</span>.state.currentTotalTime&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音频控件  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;audio id=<span class=\"string\">\"audio\"</span> src=&#123;<span class=\"keyword\">this</span>.props.tracks[<span class=\"keyword\">this</span>.state.currentTrackIndex].mp3Url&#125;&gt;&lt;/audio&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p> 打包使用，使用npm run build 构建完成，提取出js，和css，在需要使用的页面上 插入div，命名为reactmusicplayer即可。</p>\n<p> <img src=\"https://blog.felixplanet.cn/images/sample/reactpic2.png\" alt=\"样例\"></p>\n<p>由于缺乏前端功底，实在是不好看，所以还是向网易云妥协了。</p>\n<p><strong>PS： 本地调试的时候，localhost请求个人网站上的静态json文件来完成配置时，遇到了jsonp的ajax跨域问题。将在下阶段研究一哈！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在用<strong>hexo</strong>搭建博客的时候，想在页面上展示一首音乐。一开始想到的是直接用网易云的外链播放，本质是在页面上加一个iframe。然而很局限的是，由于现在的版权风暴，许多歌曲已经下架了，而自己加入网易云盘的歌曲，虽然可以自己听，但是并不能用作外链（cookie检查）。</p>\n<p>于是想动手做一个h5的页面音乐播放器。在考虑了原生H5之后，发现不太方便，因为引入hexo的话，需要组件化，而原生H5对前端技术要求比较高。于是采用了<strong>ReactJS</strong>。</p>\n<p>ReactJS一个优点在于，组件化的思想，让不擅长前端的童鞋，也能用组装的方式去完成一个控件。</p>\n<ol>\n<li><p>使用npm搭建React开发环境<br>只引用react即可，并未采用前端工程化打包webpack。因为我们只需要打包好控件，然后引用js，css即可。</p>\n</li>\n<li><p>UI。主要是先在入口的index.js里面把控件的结构构建好，然后设计对应的css样式。这样我们的控件就有了一个大体的模样了。<br><img src=\"https://blog.felixplanet.cn/images/sample/reactpic1.png\" alt=\"样式示例\"></p>\n</li>\n<li><p>逻辑处理。在React的生命周期里，使用 getDefaultProps 方法设置初始的参数，即播放歌曲的信息（之后会考虑读取配置文件）。然后在render方法中对属性值进行事件的操作。比如播放，暂停，下一首…</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t&lt;div className=<span class=\"string\">\"musicplayer\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音乐专辑图  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;TrackInfo track=&#123;<span class=\"keyword\">this</span>.props.tracks[<span class=\"keyword\">this</span>.state.currentTrackIndex]&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音乐信息   */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Progress progress=&#123;<span class=\"keyword\">this</span>.state.currentTime / <span class=\"keyword\">this</span>.state.currentTotalTime * <span class=\"number\">100</span> + <span class=\"string\">'%'</span>&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 播放进度条  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Controls isPlay=&#123;<span class=\"keyword\">this</span>.state.playStatus&#125; onPlay=&#123;<span class=\"keyword\">this</span>.play&#125; onPrevious=&#123;<span class=\"keyword\">this</span>.previous&#125; onNext=&#123;<span class=\"keyword\">this</span>.next&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 播放时间   */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;Time currentTime=&#123;<span class=\"keyword\">this</span>.state.currentTime&#125; currentTotalTime=&#123;<span class=\"keyword\">this</span>.state.currentTotalTime&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#123;<span class=\"comment\">/* 音频控件  */</span>&#125;</span><br><span class=\"line\">\t\t\t&lt;audio id=<span class=\"string\">\"audio\"</span> src=&#123;<span class=\"keyword\">this</span>.props.tracks[<span class=\"keyword\">this</span>.state.currentTrackIndex].mp3Url&#125;&gt;&lt;/audio&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p> 打包使用，使用npm run build 构建完成，提取出js，和css，在需要使用的页面上 插入div，命名为reactmusicplayer即可。</p>\n<p> <img src=\"https://blog.felixplanet.cn/images/sample/reactpic2.png\" alt=\"样例\"></p>\n<p>由于缺乏前端功底，实在是不好看，所以还是向网易云妥协了。</p>\n<p><strong>PS： 本地调试的时候，localhost请求个人网站上的静态json文件来完成配置时，遇到了jsonp的ajax跨域问题。将在下阶段研究一哈！</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjicv29oa0000mww3eku14a9v","category_id":"cjicv29pi0004mww3pm2872at","_id":"cjicv29pu000emww3uaictoyq"},{"post_id":"cjicv29pn0008mww31rmwof3t","category_id":"cjicv29pi0004mww3pm2872at","_id":"cjicv29pv000gmww3npxve49e"},{"post_id":"cjicv29pr000cmww3ernke9sx","category_id":"cjicv29pi0004mww3pm2872at","_id":"cjicv29pw000jmww3pjd9v69y"},{"post_id":"cjicv29pf0002mww3nirdtaoj","category_id":"cjicv29pi0004mww3pm2872at","_id":"cjicv29pw000lmww3b61bxtaq"},{"post_id":"cjicv29pk0006mww3w6e6yfdc","category_id":"cjicv29pi0004mww3pm2872at","_id":"cjicv29px000nmww3izfgjyzn"},{"post_id":"cjicv29pl0007mww3kf6cg8bv","category_id":"cjicv29pw000imww3ummldhro","_id":"cjicv29py000qmww3i3w4n01r"}],"PostTag":[{"post_id":"cjicv29oa0000mww3eku14a9v","tag_id":"cjicv29pk0005mww3ex61l1wr","_id":"cjicv29pq000bmww35qtaswv8"},{"post_id":"cjicv29pf0002mww3nirdtaoj","tag_id":"cjicv29po000amww3ojvelofg","_id":"cjicv29pv000hmww3vm60vm78"},{"post_id":"cjicv29pk0006mww3w6e6yfdc","tag_id":"cjicv29pu000fmww3u443ddku","_id":"cjicv29px000mmww3x72ldigg"},{"post_id":"cjicv29pl0007mww3kf6cg8bv","tag_id":"cjicv29pw000kmww3m0znvdhl","_id":"cjicv29py000pmww3zox55vka"},{"post_id":"cjicv29pn0008mww31rmwof3t","tag_id":"cjicv29py000omww31jdwewqu","_id":"cjicv29pz000smww3xc4x9wtw"},{"post_id":"cjicv29pr000cmww3ernke9sx","tag_id":"cjicv29pz000rmww3caihhxky","_id":"cjicv29q0000tmww3czrcbnwt"}],"Tag":[{"name":"JNA","_id":"cjicv29pk0005mww3ex61l1wr"},{"name":"GoogleTest","_id":"cjicv29po000amww3ojvelofg"},{"name":"IDE","_id":"cjicv29pu000fmww3u443ddku"},{"name":"测试","_id":"cjicv29pw000kmww3m0znvdhl"},{"name":"ajax","_id":"cjicv29py000omww31jdwewqu"},{"name":"react","_id":"cjicv29pz000rmww3caihhxky"}]}}